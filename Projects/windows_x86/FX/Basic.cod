//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
    bool    gWave;                      // Offset:  320, size:    4
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(16);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 22 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //   bool gWave;                        // Offset:  320 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float     z 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_constantbuffer CB1[21], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o3.z
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   o3.w <- <VS return value>.Tex1.y; o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; o3.z <- <VS return value>.Tex1.x; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 118 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                mov r0.xyz, v0.yxzy
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.yxzw, cb1[0].xyzw  // r1.x <- vout.PosW.x
                dp4 r1.y, r0.yxzw, cb1[1].xyzw  // r1.y <- vout.PosW.y
                dp4 r1.z, r0.yxzw, cb1[2].xyzw  // r1.z <- vout.PosW.z
                
                #line 119
                dp3 r2.x, v1.xyzx, cb1[4].xyzx  // r2.x <- vout.NormalW.x
                dp3 r2.y, v1.xyzx, cb1[5].xyzx  // r2.y <- vout.NormalW.y
                dp3 r2.z, v1.xyzx, cb1[6].xyzx  // r2.z <- vout.NormalW.z
                
                #line 121
                mov r1.w, l(0)  // r1.w <- r
                
                #line 122
                itof r3.y, l(10)  // r3.y <- x
                
                #line 123
                ine r2.w, l(0, 0, 0, 0), cb1[20].x
                if_nz r2.w
                
                #line 128
                  div r2.w, cb0[12].w, r3.y
                  mul r3.z, cb0[12].w, l(2.000000)
                  add r3.w, v0.y, v0.x
                  itof r4.x, l(1)
                  itof r4.y, l(1)
                  div r4.y, r4.y, r3.y
                  mov r4.y, -r4.y
                  add r4.x, r4.y, r4.x
                  mul r3.w, r3.w, r4.x
                  mov r4.x, -v0.z
                  add r3.w, r3.w, r4.x
                  mul r3.w, r3.w, l(0.070000)
                  add r3.z, r3.w, r3.z
                  sincos r3.z, null, r3.z
                  mul r2.w, r2.w, r3.z
                  add r1.w, r1.w, r2.w
                
                #line 129
                  add r2.w, r3.y, l(-1.000000)  // r2.w <- x
                
                #line 131
                  mov r3.x, r1.w  // r3.x <- r
                  mov r3.y, r2.w  // r3.y <- x
                  loop 
                    itof r3.z, l(0)
                    lt r3.z, r3.z, r3.y
                    breakc_z r3.z
                
                #line 128
                    div r3.z, cb0[12].w, r3.y
                    mul r3.w, cb0[12].w, l(2.000000)
                    add r4.x, v0.y, v0.x
                    itof r4.y, l(1)
                    itof r4.z, l(1)
                    div r4.z, r4.z, r3.y
                    mov r4.z, -r4.z
                    add r4.y, r4.z, r4.y
                    mul r4.x, r4.y, r4.x
                    mov r4.y, -v0.z
                    add r4.x, r4.y, r4.x
                    mul r4.x, r4.x, l(0.070000)
                    add r3.w, r3.w, r4.x
                    sincos r3.w, null, r3.w
                    mul r3.z, r3.w, r3.z
                    add r3.x, r3.z, r3.x
                
                #line 129
                    add r3.y, r3.y, l(-1.000000)
                
                #line 131
                  endloop 
                
                #line 134
                  div r1.w, r3.x, cb0[12].w
                  add r0.x, r1.w, l(0.100000)  // r0.x <- vin.PosL.y
                
                #line 137
                else   // Prior locations: r1.w <- r
                  mov r0.x, v0.y  // r0.x <- vin.PosL.y
                endif 
                
                #line 139
                dp4 r4.x, r0.yxzw, cb1[8].xyzw  // r4.x <- vout.PosH.x
                dp4 r4.y, r0.yxzw, cb1[9].xyzw  // r4.y <- vout.PosH.y
                dp4 r4.z, r0.yxzw, cb1[10].xyzw  // r4.z <- vout.PosH.z
                dp4 r4.w, r0.yxzw, cb1[11].xyzw  // r4.w <- vout.PosH.w
                
                #line 142
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb1[12].xyzw  // r5.x <- vout.Tex.x
                dp4 r5.y, r0.xyzw, cb1[13].xyzw  // r5.y <- vout.Tex.y
                
                #line 144
                mul r0.x, cb0[12].w, l(2.000000)
                mov r0.y, -v0.x
                itof r0.z, l(1)
                itof r0.w, l(1)
                div r0.w, r0.w, r3.y
                mov r0.w, -r0.w
                add r0.z, r0.w, r0.z
                mul r0.y, r0.z, r0.y
                mov r0.z, -v0.z
                add r0.y, r0.z, r0.y
                mul r0.y, r0.y, l(0.050000)
                add r0.x, r0.y, r0.x
                sincos r0.x, null, r0.x
                mul r0.x, r0.x, l(1.000000)  // r0.x <- vout.Tex1.x
                
                #line 145
                mov o0.xyzw, r4.xyzw
                mov o1.xyz, r1.xyzx
                mov o2.xyz, r2.xyzx
                mov o3.xy, r5.xyxx
                mov o3.z, r0.x
                ret 
                // Approximately 86 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //   bool gWave;                        // Offset:  320 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // TEXCOORD                 1     zw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; v3.z <- pin.Tex1.x; v3.w <- pin.Tex1.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 163 "D:\静态编译的DirectX11项目BlendDemo工程文件以及相关资料\BlendDemo\FX\Basic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 182
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 195
                nop 
                nop 
                nop 
                
                #line 220
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 229
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

}

