//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer BufferMatrix
{
    float4x4 g_matViewProj;             // Offset:    0, size:   64
    uint    g_VertexTextureWidth;       // Offset:   64, size:    4
    uint    g_VertexTexturePosCount;    // Offset:   68, size:    4
    uint    g_VertexTextureNormalCount; // Offset:   72, size:    4
    uint    g_VertexTextureTangentCount;// Offset:   76, size:    4
    uint    g_VertexTextureUVCount;     // Offset:   80, size:    4
}

//
// 4 local object(s)
//
Texture2D g_TextureList[2];
SamplerState g_SampleType
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    MipLODBias = float(0);
    ComparisonFunc = uint(ALWAYS /* 8 */);
    MinLOD   = float(0);
    MaxLOD   = float(3.40282347e+038);
};
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(10000);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
    CullMode = uint(FRONT /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ShaderTec
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer BufferMatrix
                // {
                //
                //   float4x4 g_matViewProj;            // Offset:    0 Size:    64
                //   uint g_VertexTextureWidth;         // Offset:   64 Size:     4
                //   uint g_VertexTexturePosCount;      // Offset:   68 Size:     4
                //   uint g_VertexTextureNormalCount;   // Offset:   72 Size:     4
                //   uint g_VertexTextureTangentCount;  // Offset:   76 Size:     4
                //   uint g_VertexTextureUVCount;       // Offset:   80 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_TextureList[1]                  texture  float4          2d             t1      1 
                // BufferMatrix                      cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE    uint   x  w
                // WORLD                    0   xyzw        1     NONE   float   xyzw
                // WORLD                    1   xyzw        2     NONE   float   xyzw
                // WORLD                    2   xyzw        3     NONE   float   xyzw
                // WORLD                    3   xyzw        4     NONE   float   xyzw
                // SV_InstanceID            0   x           5   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input v0.xw
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_input v3.xyzw
                dcl_input v4.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.ValueIndex.x; v0.y <- input.ValueIndex.y; v0.z <- input.ValueIndex.z; v0.w <- input.ValueIndex.w; 
                //   v1.x <- input.World._m00; v1.y <- input.World._m01; v1.z <- input.World._m02; v1.w <- input.World._m03; 
                //   v2.x <- input.World._m10; v2.y <- input.World._m11; v2.z <- input.World._m12; v2.w <- input.World._m13; 
                //   v3.x <- input.World._m20; v3.y <- input.World._m21; v3.z <- input.World._m22; v3.w <- input.World._m23; 
                //   v4.x <- input.World._m30; v4.y <- input.World._m31; v4.z <- input.World._m32; v4.w <- input.World._m33; 
                //   v5.x <- input.InstanceId; 
                //   o1.x <- <ShaderVS return value>.Tex.x; o1.y <- <ShaderVS return value>.Tex.y; 
                //   o0.x <- <ShaderVS return value>.Position.x; o0.y <- <ShaderVS return value>.Position.y; o0.z <- <ShaderVS return value>.Position.z; o0.w <- <ShaderVS return value>.Position.w
                //
                #line 161 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk_nobone.fx"
                nop 
                
                #line 89
                mov r0.x, l(4)  // r0.x <- sizeofPixel
                
                #line 90
                mov r0.y, l(12)  // r0.y <- sizeofPos
                
                #line 91
                mov r0.z, l(12)  // r0.z <- sizeofNormal
                
                #line 92
                mov r0.w, l(12)  // r0.w <- sizeofTangent
                
                #line 93
                mov r1.x, l(8)  // r1.x <- sizeofUV
                
                #line 96
                imul null, r1.y, r0.y, v0.x
                udiv r1.y, null, r1.y, r0.x  // r1.y <- PosPixelIndex
                
                #line 97
                udiv null, r2.x, r1.y, cb0[4].x  // r2.x <- tempUV.x
                
                #line 98
                udiv r2.y, null, r1.y, cb0[4].x  // r2.y <- tempUV.y
                
                #line 99
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r1.y, r2.xyww, t1.yxzw
                mov r1.y, r1.y  // r1.y <- thePos.x
                
                #line 101
                mov r1.z, l(1)
                iadd r2.z, r1.z, r2.x  // r2.z <- tempUV.x
                
                #line 102
                uge r1.z, r2.z, cb0[4].x
                if_nz r1.z
                
                #line 104
                  mov r2.z, l(0)
                
                #line 105
                  mov r1.z, l(1)
                  iadd r2.y, r1.z, r2.y
                
                #line 106
                endif 
                
                #line 107
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r1.z, r2.zyww, t1.yzxw
                mov r1.z, r1.z  // r1.z <- thePos.y
                
                #line 109
                mov r1.w, l(1)
                iadd r2.x, r1.w, r2.z  // r2.x <- tempUV.x
                
                #line 110
                uge r1.w, r2.x, cb0[4].x
                if_nz r1.w
                
                #line 112
                  mov r2.x, l(0)
                
                #line 113
                  mov r1.w, l(1)
                  iadd r2.y, r1.w, r2.y
                
                #line 114
                endif 
                
                #line 115
                mov r2.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r1.w, r2.xyzz, t1.yzwx
                mov r1.w, r1.w  // r1.w <- thePos.z
                
                #line 116
                mov r2.x, l(1.000000)  // r2.x <- thePos.w
                
                #line 120
                imul null, r0.y, r0.y, cb0[4].y
                imul null, r0.z, r0.z, cb0[4].z
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r0.w, cb0[4].w
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r1.x, v0.w
                iadd r0.y, r0.z, r0.y
                udiv r0.x, null, r0.y, r0.x  // r0.x <- UVPixelIndex
                
                #line 121
                udiv null, r3.z, r0.x, cb0[4].x  // r3.z <- tempUV.x
                
                #line 122
                udiv r3.y, null, r0.x, cb0[4].x  // r3.y <- tempUV.y
                
                #line 123
                mov r3.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.x, r3.zyww, t1.xyzw
                mov r0.x, r0.x  // r0.x <- theUV.x
                
                #line 125
                mov r0.z, l(1)
                iadd r3.x, r0.z, r3.z  // r3.x <- tempUV.x
                
                #line 126
                uge r0.z, r3.x, cb0[4].x
                if_nz r0.z
                
                #line 128
                  mov r3.x, l(0)
                
                #line 129
                  mov r0.z, l(1)
                  iadd r3.y, r0.z, r3.y
                
                #line 130
                endif 
                
                #line 131
                mov r3.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.y, r3.xyzz, t1.yxzw
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 161
                mov r1.y, r1.y  // r1.y <- thePos.x
                mov r1.z, r1.z  // r1.z <- thePos.y
                mov r1.w, r1.w  // r1.w <- thePos.z
                mov r2.x, r2.x  // r2.x <- thePos.w
                mov r0.x, r0.x  // r0.x <- theUV.x
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 166
                mul r3.xyzw, r1.yyyy, v1.xyzw
                mul r4.xyzw, r1.zzzz, v2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r1.xyzw, r1.wwww, v3.xyzw
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r2.xyzw, r2.xxxx, v4.xyzw
                add r1.xyzw, r1.xyzw, r2.xyzw  // r1.x <- thePos.x; r1.y <- thePos.y; r1.z <- thePos.z; r1.w <- thePos.w
                
                #line 168
                dp4 r2.x, r1.xyzw, cb0[0].xyzw  // r2.x <- output.Position.x
                dp4 r2.y, r1.xyzw, cb0[1].xyzw  // r2.y <- output.Position.y
                dp4 r2.z, r1.xyzw, cb0[2].xyzw  // r2.z <- output.Position.z
                dp4 r2.w, r1.xyzw, cb0[3].xyzw  // r2.w <- output.Position.w
                
                #line 169
                mov r0.xy, r0.xyxx  // r0.x <- output.Tex.x; r0.y <- output.Tex.y
                
                #line 170
                mov o0.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 81 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinear                         sampler      NA          NA             s0      1 
                // g_TextureList[0]                  texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // no Output
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.Position.x; v0.y <- pin.Position.y; v0.z <- pin.Position.z; v0.w <- pin.Position.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y
                //
                #line 175 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk_nobone.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // r0.x <- diffuse.w
                
                #line 178
                mov r0.y, l(-0.150000)
                add r0.x, r0.y, r0.x
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard_nz r0.x
                
                #line 179
                ret 
                // Approximately 8 instruction slots used
                            
            };
            RasterizerState = Depth;
        }

    }

}

