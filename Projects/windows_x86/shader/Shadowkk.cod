//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer BufferMatrix
{
    float4x4 g_matWorld;                // Offset:    0, size:   64
    float4x4 g_matViewProj;             // Offset:   64, size:   64
    float4x4 g_matWorldInvTranspose;    // Offset:  128, size:   64
    uint    g_VertexTextureWidth;       // Offset:  192, size:    4
    uint    g_VertexTexturePosCount;    // Offset:  196, size:    4
    uint    g_AnimTextureWidth;         // Offset:  200, size:    4
    uint    g_AnimTextureBoneCount;     // Offset:  204, size:    4
    uint    g_AnimTextureKeyFrameIndex; // Offset:  208, size:    4
}

//
// 3 local object(s)
//
Texture2D g_TextureList[3];
SamplerState g_SampleType
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
RasterizerState Depth
{
    DepthBias = uint(0x000186a0);
    DepthBiasClamp = float(0);
    SlopeScaledDepthBias = float(1);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ShaderTec
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer BufferMatrix
                // {
                //
                //   float4x4 g_matWorld;               // Offset:    0 Size:    64
                //   float4x4 g_matViewProj;            // Offset:   64 Size:    64
                //   float4x4 g_matWorldInvTranspose;   // Offset:  128 Size:    64 [unused]
                //   uint g_VertexTextureWidth;         // Offset:  192 Size:     4
                //   uint g_VertexTexturePosCount;      // Offset:  196 Size:     4 [unused]
                //   uint g_AnimTextureWidth;           // Offset:  200 Size:     4
                //   uint g_AnimTextureBoneCount;       // Offset:  204 Size:     4
                //   uint g_AnimTextureKeyFrameIndex;   // Offset:  208 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_TextureList[1]                  texture  float4          2d             t1      1 
                // g_TextureList[2]                  texture  float4          2d             t2      1 
                // BufferMatrix                      cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE    uint   x   
                // COLOR                    0   xyzw        1     NONE    uint   xyzw
                // COLOR                    1   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000},
                                              { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input v0.x
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_temps 8
                //
                // Initial variable locations:
                //   v0.x <- input.ValueIndex.x; v0.y <- input.ValueIndex.y; v0.z <- input.ValueIndex.z; v0.w <- input.ValueIndex.w; 
                //   v1.x <- input.BoneIndex.x; v1.y <- input.BoneIndex.y; v1.z <- input.BoneIndex.z; v1.w <- input.BoneIndex.w; 
                //   v2.x <- input.BoneWeight.x; v2.y <- input.BoneWeight.y; v2.z <- input.BoneWeight.z; v2.w <- input.BoneWeight.w; 
                //   o0.x <- <ShaderVS return value>.Position.x; o0.y <- <ShaderVS return value>.Position.y; o0.z <- <ShaderVS return value>.Position.z; o0.w <- <ShaderVS return value>.Position.w
                //
                #line 197 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk.fx"
                nop 
                
                #line 72
                mov r0.x, l(4)  // r0.x <- sizeofPixel
                
                #line 73
                mov r0.y, l(12)  // r0.y <- sizeofPos
                
                #line 76
                imul null, r0.y, r0.y, v0.x
                udiv r0.x, null, r0.y, r0.x  // r0.x <- PosPixelIndex
                
                #line 77
                udiv null, r1.x, r0.x, cb0[12].x  // r1.x <- tempUV.x
                
                #line 78
                udiv r1.y, null, r0.x, cb0[12].x  // r1.y <- tempUV.y
                
                #line 79
                mov r1.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.x, r1.xyww, t1.xyzw  // r0.x <- thePos.x
                
                #line 81
                mov r2.x, l(1)
                iadd r1.z, r1.x, r2.x  // r1.z <- tempUV.x
                
                #line 82
                uge r2.x, r1.z, cb0[12].x
                if_nz r2.x
                
                #line 84
                  mov r1.z, l(0)
                
                #line 85
                  mov r2.x, l(1)
                  iadd r1.y, r1.y, r2.x
                
                #line 86
                endif 
                
                #line 87
                mov r1.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.y, r1.zyww, t1.yxzw  // r0.y <- thePos.y
                
                #line 89
                mov r1.w, l(1)
                iadd r1.x, r1.w, r1.z  // r1.x <- tempUV.x
                
                #line 90
                uge r1.w, r1.x, cb0[12].x
                if_nz r1.w
                
                #line 92
                  mov r1.x, l(0)
                
                #line 93
                  mov r1.w, l(1)
                  iadd r1.y, r1.w, r1.y
                
                #line 94
                endif 
                
                #line 95
                mov r1.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.z, r1.xyzz, t1.yzxw  // r0.z <- thePos.z
                
                #line 96
                mov r0.w, l(1.000000)  // r0.w <- thePos.w
                
                #line 197
                mov r0.x, r0.x  // r0.x <- thePos.x
                mov r0.y, r0.y  // r0.y <- thePos.y
                mov r0.z, r0.z  // r0.z <- thePos.z
                mov r0.w, r0.w  // r0.w <- thePos.w
                
                #line 201
                ine r1.x, cb0[13].x, l(-1)
                if_nz r1.x
                
                #line 203
                  nop 
                  mov r1.xyzw, r0.xyzw
                
                #line 154
                  mov r2.xyz, l(0,0,0,0)  // r2.x <- finalPos.x; r2.y <- finalPos.y; r2.z <- finalPos.z
                
                #line 155
                  mov r2.w, l(0)  // r2.w <- i
                  mov r0.xyz, r2.xyzx  // r0.x <- finalPos.x; r0.y <- finalPos.y; r0.z <- finalPos.z
                  mov r3.x, r2.w  // r3.x <- i
                  loop 
                    mov r3.y, l(4)
                    ult r3.y, r3.x, r3.y
                    breakc_z r3.y
                
                #line 157
                    and r4.xyzw, v1.xyzw, icb[r3.x + 4].xyzw
                    or r3.yz, r4.yywy, r4.xxzx
                    or r3.y, r3.z, r3.y
                    ine r3.y, r3.y, l(-1)
                    if_nz r3.y
                
                #line 159
                      nop 
                      and r4.xyzw, v1.xyzw, icb[r3.x + 4].xyzw
                      or r3.yz, r4.yywy, r4.xxzx
                      or r3.y, r3.z, r3.y
                
                #line 103
                      mov r3.z, l(4)  // r3.z <- sizeofPixel
                
                #line 104
                      mov r3.w, l(48)  // r3.w <- ElementSize
                
                #line 105
                      imul null, r4.x, cb0[12].w, cb0[13].x
                      imul null, r4.x, r3.w, r4.x
                      imul null, r3.y, r3.w, r3.y
                      iadd r3.y, r3.y, r4.x
                      udiv r3.y, null, r3.y, r3.z  // r3.y <- startPixelIndex
                
                #line 107
                      udiv null, r4.y, r3.y, cb0[12].z  // r4.y <- tempUV.x
                
                #line 108
                      udiv r4.z, null, r3.y, cb0[12].z  // r4.z <- tempUV.y
                
                #line 109
                      mov r4.w, l(0)
                      ld_indexable(texture2d)(float,float,float,float) r5.x, r4.yzww, t2.xyzw  // r5.x <- finalMat._m00
                
                #line 111
                      mov r3.y, l(1)
                      iadd r4.x, r3.y, r4.y  // r4.x <- tempUV.x
                
                #line 112
                      ld_indexable(texture2d)(float,float,float,float) r6.x, r4.xzww, t2.xyzw  // r6.x <- finalMat._m01
                
                #line 114
                      mov r3.y, l(1)
                      iadd r4.y, r3.y, r4.x  // r4.y <- tempUV.x
                
                #line 115
                      ld_indexable(texture2d)(float,float,float,float) r7.x, r4.yzww, t2.xyzw  // r7.x <- finalMat._m02
                
                #line 117
                      mov r3.y, l(1)
                      iadd r4.x, r3.y, r4.y  // r4.x <- tempUV.x
                
                #line 118
                      ld_indexable(texture2d)(float,float,float,float) r5.y, r4.xzww, t2.yxzw  // r5.y <- finalMat._m10
                
                #line 120
                      mov r3.y, l(1)
                      iadd r4.y, r3.y, r4.x  // r4.y <- tempUV.x
                
                #line 121
                      ld_indexable(texture2d)(float,float,float,float) r6.y, r4.yzww, t2.yxzw  // r6.y <- finalMat._m11
                
                #line 123
                      mov r3.y, l(1)
                      iadd r4.x, r3.y, r4.y  // r4.x <- tempUV.x
                
                #line 124
                      ld_indexable(texture2d)(float,float,float,float) r7.y, r4.xzww, t2.yxzw  // r7.y <- finalMat._m12
                
                #line 126
                      mov r3.y, l(1)
                      iadd r4.y, r3.y, r4.x  // r4.y <- tempUV.x
                
                #line 127
                      ld_indexable(texture2d)(float,float,float,float) r5.z, r4.yzww, t2.yzxw  // r5.z <- finalMat._m20
                
                #line 129
                      mov r3.y, l(1)
                      iadd r4.x, r3.y, r4.y  // r4.x <- tempUV.x
                
                #line 130
                      ld_indexable(texture2d)(float,float,float,float) r6.z, r4.xzww, t2.yzxw  // r6.z <- finalMat._m21
                
                #line 132
                      mov r3.y, l(1)
                      iadd r4.y, r3.y, r4.x  // r4.y <- tempUV.x
                
                #line 133
                      ld_indexable(texture2d)(float,float,float,float) r7.z, r4.yzww, t2.yzxw  // r7.z <- finalMat._m22
                
                #line 135
                      mov r3.y, l(1)
                      iadd r4.x, r3.y, r4.y  // r4.x <- tempUV.x
                
                #line 136
                      ld_indexable(texture2d)(float,float,float,float) r5.w, r4.xzww, t2.yzwx  // r5.w <- finalMat._m30
                
                #line 138
                      mov r3.y, l(1)
                      iadd r4.y, r3.y, r4.x  // r4.y <- tempUV.x
                
                #line 139
                      ld_indexable(texture2d)(float,float,float,float) r6.w, r4.yzww, t2.yzwx  // r6.w <- finalMat._m31
                
                #line 141
                      mov r3.y, l(1)
                      iadd r4.x, r3.y, r4.y  // r4.x <- tempUV.x
                
                #line 142
                      ld_indexable(texture2d)(float,float,float,float) r7.w, r4.xzww, t2.yzwx  // r7.w <- finalMat._m32
                
                #line 149
                      mov r5.x, r5.x  // r5.x <- <GetSingleBoneAnimMatrix return value>._m00
                      mov r5.y, r5.y  // r5.y <- <GetSingleBoneAnimMatrix return value>._m10
                      mov r5.z, r5.z  // r5.z <- <GetSingleBoneAnimMatrix return value>._m20
                      mov r5.w, r5.w  // r5.w <- <GetSingleBoneAnimMatrix return value>._m30
                      mov r6.x, r6.x  // r6.x <- <GetSingleBoneAnimMatrix return value>._m01
                      mov r6.y, r6.y  // r6.y <- <GetSingleBoneAnimMatrix return value>._m11
                      mov r6.z, r6.z  // r6.z <- <GetSingleBoneAnimMatrix return value>._m21
                      mov r6.w, r6.w  // r6.w <- <GetSingleBoneAnimMatrix return value>._m31
                      mov r7.x, r7.x  // r7.x <- <GetSingleBoneAnimMatrix return value>._m02
                      mov r7.y, r7.y  // r7.y <- <GetSingleBoneAnimMatrix return value>._m12
                      mov r7.z, r7.z  // r7.z <- <GetSingleBoneAnimMatrix return value>._m22
                      mov r7.w, r7.w  // r7.w <- <GetSingleBoneAnimMatrix return value>._m32
                
                #line 159
                      mov r5.xyzw, r5.xyzw  // r5.x <- BoneMat._m00; r5.y <- BoneMat._m10; r5.z <- BoneMat._m20; r5.w <- BoneMat._m30
                      mov r6.xyzw, r6.xyzw  // r6.x <- BoneMat._m01; r6.y <- BoneMat._m11; r6.z <- BoneMat._m21; r6.w <- BoneMat._m31
                      mov r7.xyzw, r7.xyzw  // r7.x <- BoneMat._m02; r7.y <- BoneMat._m12; r7.z <- BoneMat._m22; r7.w <- BoneMat._m32
                
                #line 161
                      dp4 r4.x, r1.xyzw, r5.xyzw
                      dp4 r4.y, r1.xyzw, r6.xyzw
                      dp4 r4.z, r1.xyzw, r7.xyzw
                      dp4 r3.y, v2.xyzw, icb[r3.x + 0].xyzw
                      mul r3.yzw, r3.yyyy, r4.xxyz
                      add r0.xyz, r0.xyzx, r3.yzwy
                
                #line 162
                    else 
                
                #line 165
                      break   // r5.x <- BoneMat._m00; r5.y <- BoneMat._m10; r5.z <- BoneMat._m20; r5.w <- BoneMat._m30; r6.x <- BoneMat._m01; r6.y <- BoneMat._m11; r6.z <- BoneMat._m21; r6.w <- BoneMat._m31; r7.x <- BoneMat._m02; r7.y <- BoneMat._m12; r7.z <- BoneMat._m22; r7.w <- BoneMat._m32
                
                #line 166
                    endif 
                
                #line 155
                    iadd r3.x, r3.x, l(1)
                
                #line 167
                  endloop 
                
                #line 168
                  mov r0.w, l(1.000000)  // r0.w <- finalPos.w
                
                #line 169
                  mov r0.xyz, r0.xyzx  // r0.x <- thePos.x; r0.y <- thePos.y; r0.z <- thePos.z
                  mov r0.w, r0.w  // r0.w <- thePos.w
                
                #line 203
                  mov r0.xyzw, r0.xyzw  // r0.x <- thePos.x; r0.y <- thePos.y; r0.z <- thePos.z; r0.w <- thePos.w
                
                #line 204
                endif 
                
                #line 207
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // r1.x <- thePos.x
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // r1.y <- thePos.y
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // r1.z <- thePos.z
                dp4 r1.w, r0.xyzw, cb0[3].xyzw  // r1.w <- thePos.w
                
                #line 210
                dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- output.Position.x
                dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- output.Position.y
                dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- output.Position.z
                dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- output.Position.w
                
                #line 212
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 140 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = NULL;
            RasterizerState = Depth;
        }

    }

}

