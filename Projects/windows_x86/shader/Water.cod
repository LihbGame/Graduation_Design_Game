//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
    float4  gWaveParams;                // Offset:   16, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldViewProj;            // Offset:   64, size:   64
}

//
// 5 local object(s)
//
Texture2D gNormalMap;
Texture2D gReflectionMap;
Texture2D gRefractionMap;
SamplerState samLinearBump
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    MaxAnisotropy = uint(1);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    MaxAnisotropy = uint(1);
    AddressU = uint(MIRROR /* 2 */);
    AddressV = uint(MIRROR /* 2 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 Water
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12
                //   float4 gWaveParams;                // Offset:   16 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float       
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xyzw        2     NONE   float   xyzw
                // TEXCOORD                 2   xy          3     NONE   float   xy  
                // TEXCOORD                 3     zw        3     NONE   float     zw
                // TEXCOORD                 4   xy          4     NONE   float   xy  
                // TEXCOORD                 5   xyzw        5     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[2], immediateIndexed
                dcl_constantbuffer CB1[8], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyzw
                dcl_output o3.xy
                dcl_output o3.zw
                dcl_output o4.xy
                dcl_output o5.xyzw
                dcl_temps 11
                //
                // Initial variable locations:
                //   v0.x <- vin.Pos.x; v0.y <- vin.Pos.y; v0.z <- vin.Pos.z; 
                //   v1.x <- vin.Normal.x; v1.y <- vin.Normal.y; v1.z <- vin.Normal.z; 
                //   v2.x <- vin.TexCoord0.x; v2.y <- vin.TexCoord0.y; 
                //   v3.x <- vin.Tangent.x; v3.y <- vin.Tangent.y; v3.z <- vin.Tangent.z; 
                //   o5.x <- <VS return value>.ScreenPos.x; o5.y <- <VS return value>.ScreenPos.y; o5.z <- <VS return value>.ScreenPos.z; o5.w <- <VS return value>.ScreenPos.w; 
                //   o4.x <- <VS return value>.Wave3.x; o4.y <- <VS return value>.Wave3.y; 
                //   o3.x <- <VS return value>.Wave1.x; o3.y <- <VS return value>.Wave1.y; o3.z <- <VS return value>.Wave2.x; o3.w <- <VS return value>.Wave2.y; 
                //   o2.x <- <VS return value>.Wave0.x; o2.y <- <VS return value>.Wave0.y; o2.z <- <VS return value>.Wave0.z; o2.w <- <VS return value>.Wave0.w; 
                //   o1.x <- <VS return value>.Eye.x; o1.y <- <VS return value>.Eye.y; o1.z <- <VS return value>.Eye.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 84 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Water.fx"
                mov r0.xyz, v0.xyzx  // r0.x <- PosW.x; r0.y <- PosW.y; r0.z <- PosW.z
                
                #line 87
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb1[4].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r1.xyzw, cb1[5].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r1.xyzw, cb1[6].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r1.xyzw, cb1[7].xyzw  // r2.w <- vout.PosH.w
                
                #line 88
                itof r0.w, l(100)
                div r3.x, cb0[1].w, r0.w
                mov r3.y, -r3.x
                max r3.z, r3.y, r3.x
                ge r3.x, r3.x, r3.y
                frc r3.y, r3.z
                mov r3.z, -r3.y
                movc r3.x, r3.x, r3.y, r3.z
                mul r0.w, r0.w, r3.x
                mul r3.x, r0.w, l(0.010000)  // r3.x <- tans
                
                #line 89
                itof r3.y, l(0)  // r3.y <- fTranslation.y
                mov r3.x, r3.x  // r3.x <- fTranslation.x
                
                #line 90
                mul r3.zw, r0.xxxz, l(0.000000, 0.000000, 0.001000, 0.001000)  // r3.z <- vTexCoords.x; r3.w <- vTexCoords.y
                
                #line 99
                mul r4.xy, r3.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000)
                add r4.xy, r3.zwzz, r4.xyxx  // r4.x <- vout.Wave0.x; r4.y <- vout.Wave0.y
                
                #line 100
                mul r4.zw, r3.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000)
                mul r5.xy, r3.xyxx, l(4.000000, 4.000000, 0.000000, 0.000000)
                add r4.zw, r4.zzzw, r5.xxxy  // r4.z <- vout.Wave1.x; r4.w <- vout.Wave1.y
                
                #line 101
                mul r5.xy, r3.zwzz, l(4.000000, 4.000000, 0.000000, 0.000000)
                mul r5.zw, r3.xxxy, l(0.000000, 0.000000, 2.000000, 2.000000)
                add r5.xy, r5.zwzz, r5.xyxx  // r5.x <- vout.Wave2.x; r5.y <- vout.Wave2.y
                
                #line 102
                mul r3.zw, r3.zzzw, l(0.000000, 0.000000, 8.000000, 8.000000)
                add r3.xy, r3.xyxx, r3.zwzz  // r3.x <- vout.Wave3.x; r3.y <- vout.Wave3.y
                
                #line 105
                dp4 r6.x, r1.xyzw, cb1[4].xyzw  // r6.x <- vHPos.x
                dp4 r0.w, r1.xyzw, cb1[5].xyzw  // r0.w <- vHPos.y
                dp4 r1.w, r1.xyzw, cb1[7].xyzw  // r1.w <- vHPos.w
                
                #line 106
                mov r1.zw, r1.wwww  // r1.z <- vout.Wave0.z; r1.w <- vout.Wave0.w
                
                #line 108
                mov r6.w, -r0.w  // r6.w <- vHPos.y
                
                #line 109
                add r1.xy, r1.wwww, r6.xwxx
                mul r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r1.x <- vout.ScreenPos.x; r1.y <- vout.ScreenPos.y
                
                #line 110
                itof r3.z, l(1)  // r3.z <- vout.ScreenPos.z
                mov r3.w, r1.w  // r3.w <- vout.ScreenPos.w
                
                #line 113
                nop 
                mov r6.xyz, v3.xyzx
                mov r7.xyz, v1.xyzx
                
                #line 66
                mov r6.xyz, r6.xyzx  // r6.x <- objToTangentSpace._m00; r6.y <- objToTangentSpace._m01; r6.z <- objToTangentSpace._m02
                
                #line 67
                mul r8.xyz, r6.yzxy, r7.zxyz
                mul r9.xyz, r6.zxyz, r7.yzxy
                mov r9.xyz, -r9.xyzx
                add r8.xyz, r8.xyzx, r9.xyzx  // r8.x <- objToTangentSpace._m10; r8.y <- objToTangentSpace._m11; r8.z <- objToTangentSpace._m12
                
                #line 68
                mov r7.xyz, r7.xyzx  // r7.x <- objToTangentSpace._m20; r7.y <- objToTangentSpace._m21; r7.z <- objToTangentSpace._m22
                
                #line 70
                mov r9.x, r6.x  // r9.x <- <GetTangentSpaceBasis return value>._m00
                mov r9.y, r8.x  // r9.y <- <GetTangentSpaceBasis return value>._m10
                mov r9.z, r7.x  // r9.z <- <GetTangentSpaceBasis return value>._m20
                mov r10.x, r6.y  // r10.x <- <GetTangentSpaceBasis return value>._m01
                mov r10.y, r8.y  // r10.y <- <GetTangentSpaceBasis return value>._m11
                mov r10.z, r7.y  // r10.z <- <GetTangentSpaceBasis return value>._m21
                mov r7.x, r6.z  // r7.x <- <GetTangentSpaceBasis return value>._m02
                mov r7.y, r8.z  // r7.y <- <GetTangentSpaceBasis return value>._m12
                mov r7.z, r7.z  // r7.z <- <GetTangentSpaceBasis return value>._m22
                
                #line 113
                mov r9.xyz, r9.xyzx  // r9.x <- objToTangentSpace._m00; r9.y <- objToTangentSpace._m10; r9.z <- objToTangentSpace._m20
                mov r10.xyz, r10.xyzx  // r10.x <- objToTangentSpace._m01; r10.y <- objToTangentSpace._m11; r10.z <- objToTangentSpace._m21
                mov r7.xyz, r7.xyzx  // r7.x <- objToTangentSpace._m02; r7.y <- objToTangentSpace._m12; r7.z <- objToTangentSpace._m22
                
                #line 115
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, cb0[0].xyzx  // r0.x <- EyeVec.x; r0.y <- EyeVec.y; r0.z <- EyeVec.z
                
                #line 116
                dp3 r6.x, r0.xyzx, r9.xyzx  // r6.x <- vout.Eye.x
                dp3 r6.y, r0.xyzx, r10.xyzx  // r6.y <- vout.Eye.y
                dp3 r6.z, r0.xyzx, r7.xyzx  // r6.z <- vout.Eye.z
                
                #line 119
                mov o0.xyzw, r2.xyzw
                mov o2.xy, r4.xyxx
                mov o2.zw, r1.zzzw
                mov o3.xy, r4.zwzz
                mov o3.zw, r5.xxxy
                mov o5.xy, r1.xyxx
                mov o5.zw, r3.zzzw
                mov o1.xyz, r6.xyzx
                mov o4.xy, r3.xyxx
                ret 
                // Approximately 75 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samLinearBump                     sampler      NA          NA             s0      1 
                // samLinear                         sampler      NA          NA             s1      1 
                // gNormalMap                        texture  float4          2d             t0      1 
                // gReflectionMap                    texture  float4          2d             t1      1 
                // gRefractionMap                    texture  float4          2d             t2      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 1   xyzw        2     NONE   float   xy w
                // TEXCOORD                 2   xy          3     NONE   float   xy  
                // TEXCOORD                 3     zw        3     NONE   float     zw
                // TEXCOORD                 4   xy          4     NONE   float   xy  
                // TEXCOORD                 5   xyzw        5     NONE   float   xy w
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyw
                dcl_input_ps linear v3.xy
                dcl_input_ps linear v3.zw
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyw
                dcl_output o0.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Eye.x; v1.y <- pin.Eye.y; v1.z <- pin.Eye.z; 
                //   v2.x <- pin.Wave0.x; v2.y <- pin.Wave0.y; v2.z <- pin.Wave0.z; v2.w <- pin.Wave0.w; 
                //   v3.x <- pin.Wave1.x; v3.y <- pin.Wave1.y; v3.z <- pin.Wave2.x; v3.w <- pin.Wave2.y; 
                //   v4.x <- pin.Wave3.x; v4.y <- pin.Wave3.y; 
                //   v5.x <- pin.ScreenPos.x; v5.y <- pin.ScreenPos.y; v5.z <- pin.ScreenPos.z; v5.w <- pin.ScreenPos.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 124 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Water.fx"
                dp3 r0.x, v1.xyzx, v1.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v1.xyzx  // r0.x <- vEye.x; r0.y <- vEye.y; r0.z <- vEye.z
                
                #line 127
                sample_indexable(texture2d)(float,float,float,float) r1.xyz, v2.xyxx, t0.xyzw, s0
                mov r1.xyz, r1.xyzx  // r1.x <- vBumpTexA.x; r1.y <- vBumpTexA.y; r1.z <- vBumpTexA.z
                
                #line 128
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, v3.xyxx, t0.xyzw, s0
                mov r2.xyz, r2.xyzx  // r2.x <- vBumpTexB.x; r2.y <- vBumpTexB.y; r2.z <- vBumpTexB.z
                
                #line 129
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, v3.zwzz, t0.xyzw, s0
                mov r3.xyz, r3.xyzx  // r3.x <- vBumpTexC.x; r3.y <- vBumpTexC.y; r3.z <- vBumpTexC.z
                
                #line 130
                sample_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t0.xyzw, s0
                mov r4.xyz, r4.xyzx  // r4.x <- vBumpTexD.x; r4.y <- vBumpTexD.y; r4.z <- vBumpTexD.z
                
                #line 133
                add r1.xyz, r1.xyzx, r2.xyzx
                add r1.xyz, r3.xyzx, r1.xyzx
                add r1.xyz, r4.xyzx, r1.xyzx
                mul r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r2.xyz, l(-4.000000,-4.000000,-4.000000,-0.000000)
                add r1.xyz, r1.xyzx, r2.xyzx
                dp3 r0.w, r1.xyzx, r1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, r1.xyzx  // r1.x <- vBumpTex.x; r1.y <- vBumpTex.y; r1.z <- vBumpTex.z
                
                #line 136
                mul r2.xy, r1.xyxx, l(0.020000, 0.020000, 0.000000, 0.000000)  // r2.x <- vRefrBump.x; r2.y <- vRefrBump.y
                
                #line 137
                mul r1.xyz, r1.xyzx, l(0.010000, 0.010000, 1.000000, 0.000000)  // r1.x <- vReflBump.x; r1.y <- vReflBump.y; r1.z <- vReflBump.z
                
                #line 141
                div r2.zw, v5.xxxy, v5.wwww  // r2.z <- vProj.x; r2.w <- vProj.y
                
                #line 142
                add r3.xy, r1.xyxx, r2.zwzz
                sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t1.xyzw, s1
                mov r3.xyz, r3.xyzx  // r3.x <- vReflection.x; r3.y <- vReflection.y; r3.z <- vReflection.z
                
                #line 143
                add r2.xy, r2.xyxx, r2.zwzz
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r2.xyxx, t2.xyzw, s1  // r4.x <- vRefrA.x; r4.y <- vRefrA.y; r4.z <- vRefrA.z; r4.w <- vRefrA.w
                
                #line 144
                sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.zwzz, t2.xyzw, s1
                mov r2.xyz, r2.xyzx  // r2.x <- vRefrB.x; r2.y <- vRefrB.y; r2.z <- vRefrB.z
                
                #line 147
                mul r2.xyz, r4.wwww, r2.xyzx
                itof r0.w, l(1)
                mov r1.w, -r4.w
                add r0.w, r0.w, r1.w
                mul r4.xyz, r0.wwww, r4.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- vRefraction.x; r2.y <- vRefraction.y; r2.z <- vRefraction.z
                
                #line 150
                dp3 r0.x, r0.xyzx, r1.xyzx
                itof r0.y, l(0)
                max r0.x, r0.y, r0.x  // r0.x <- NdotL
                
                #line 151
                mov r0.y, -r0.x
                add r0.y, r0.y, l(1.000000)  // r0.y <- facing
                
                #line 152
                nop 
                mov r0.x, r0.x
                mov r0.z, l(0.200000)
                
                #line 76
                mov r0.w, l(1.000000)
                mov r0.x, -r0.x
                add r0.x, r0.x, r0.w  // r0.x <- facing
                
                #line 77
                mov r0.w, l(1.000000)
                mov r1.x, -r0.z
                add r0.w, r0.w, r1.x
                mov r1.x, l(1.000000)
                mul r1.x, r0.x, r1.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, r1.x
                mul r0.x, r0.x, r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                max r0.x, r0.z, r0.x  // r0.x <- <Fresnel return value>
                
                #line 152
                mov r0.x, r0.x  // r0.x <- fresnel
                
                #line 155
                div r0.z, l(10.000000), v2.w
                max r0.z, r0.z, l(0.000000)
                min r0.z, r0.z, l(1.000000)  // r0.z <- fDistScale
                
                #line 156
                mul r1.xyz, r0.zzzz, r2.xyzx
                itof r0.w, l(1)
                mov r0.z, -r0.z
                add r0.z, r0.z, r0.w
                itof r2.x, l(0)
                mov r2.yz, l(0,0.100000,0.125000,0)
                mul r2.xyz, r0.zzzz, r2.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- WaterDeepColor.x; r1.y <- WaterDeepColor.y; r1.z <- WaterDeepColor.z
                
                #line 158
                itof r2.x, l(0)  // r2.x <- WaterColor.x
                mov r2.yz, l(0,0.100000,0.150000,0)  // r2.y <- WaterColor.y; r2.z <- WaterColor.z
                
                #line 159
                mul r2.xyz, r0.yyyy, r2.xyzx
                mov r0.y, -r0.y
                add r0.y, r0.y, l(1.000000)
                mul r0.yzw, r0.yyyy, r1.xxyz
                add r0.yzw, r0.yyzw, r2.xxyz  // r0.y <- waterColor.x; r0.z <- waterColor.y; r0.w <- waterColor.z
                
                #line 160
                mul r1.xyz, r3.xyzx, r0.xxxx  // r1.x <- cReflect.x; r1.y <- cReflect.y; r1.z <- cReflect.z
                
                #line 163
                add o0.xyz, r0.yzwy, r1.xyzx
                itof o0.w, l(1)
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

    }

}

