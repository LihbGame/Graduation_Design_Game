//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer BufferMatrix
{
    float4x4 g_matWorld;                // Offset:    0, size:   64
    float4x4 g_matViewProj;             // Offset:   64, size:   64
    float4x4 g_matWorldInvTranspose;    // Offset:  128, size:   64
    float3  gEyePosW;                   // Offset:  192, size:   12
    uint    g_VertexTextureWidth;       // Offset:  204, size:    4
    uint    g_VertexTexturePosCount;    // Offset:  208, size:    4
    uint    g_VertexTextureNormalCount; // Offset:  212, size:    4
    uint    g_VertexTextureTangentCount;// Offset:  216, size:    4
    uint    g_VertexTextureUVCount;     // Offset:  220, size:    4
    bool    IshaveTangent;              // Offset:  224, size:    4
}

//
// 3 local object(s)
//
Texture2D g_TextureList[2];
Texture2D g_NormalTexture;
SamplerState g_SampleType
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    MipLODBias = float(0);
    ComparisonFunc = uint(ALWAYS /* 8 */);
    MinLOD   = float(0);
    MaxLOD   = float(3.40282347e+038);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ShaderTec
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer BufferMatrix
                // {
                //
                //   float4x4 g_matWorld;               // Offset:    0 Size:    64
                //   float4x4 g_matViewProj;            // Offset:   64 Size:    64
                //   float4x4 g_matWorldInvTranspose;   // Offset:  128 Size:    64
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   uint g_VertexTextureWidth;         // Offset:  204 Size:     4
                //   uint g_VertexTexturePosCount;      // Offset:  208 Size:     4
                //   uint g_VertexTextureNormalCount;   // Offset:  212 Size:     4
                //   uint g_VertexTextureTangentCount;  // Offset:  216 Size:     4
                //   uint g_VertexTextureUVCount;       // Offset:  220 Size:     4 [unused]
                //   bool IshaveTangent;                // Offset:  224 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_TextureList[1]                  texture  float4          2d             t1      1 
                // BufferMatrix                      cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE    uint   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // COLOR                    1   xyzw        3     NONE   float   xyzw
                // COLOR                    2   xyz         4     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input v0.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_output o4.xyz
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- input.ValueIndex.x; v0.y <- input.ValueIndex.y; v0.z <- input.ValueIndex.z; v0.w <- input.ValueIndex.w; 
                //   o4.x <- <ShaderVS return value>.TangentInWorld.x; o4.y <- <ShaderVS return value>.TangentInWorld.y; o4.z <- <ShaderVS return value>.TangentInWorld.z; 
                //   o3.x <- <ShaderVS return value>.NormalInWorld.x; o3.y <- <ShaderVS return value>.NormalInWorld.y; o3.z <- <ShaderVS return value>.NormalInWorld.z; o3.w <- <ShaderVS return value>.NormalInWorld.w; 
                //   o2.x <- <ShaderVS return value>.PositionInWorld.x; o2.y <- <ShaderVS return value>.PositionInWorld.y; o2.z <- <ShaderVS return value>.PositionInWorld.z; o2.w <- <ShaderVS return value>.PositionInWorld.w; 
                //   o1.x <- <ShaderVS return value>.TexCoord.x; o1.y <- <ShaderVS return value>.TexCoord.y; 
                //   o0.x <- <ShaderVS return value>.Position.x; o0.y <- <ShaderVS return value>.Position.y; o0.z <- <ShaderVS return value>.Position.z; o0.w <- <ShaderVS return value>.Position.w
                //
                #line 187 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk_nobone.fx"
                nop 
                
                #line 61
                mov r0.x, l(4)  // r0.x <- sizeofPixel
                
                #line 62
                mov r0.y, l(12)  // r0.y <- sizeofPos
                
                #line 63
                mov r0.z, l(12)  // r0.z <- sizeofNormal
                
                #line 64
                mov r0.w, l(12)  // r0.w <- sizeofTangent
                
                #line 65
                mov r1.x, l(8)  // r1.x <- sizeofUV
                
                #line 68
                imul null, r1.y, r0.y, v0.x
                udiv r1.y, null, r1.y, r0.x  // r1.y <- PosPixelIndex
                
                #line 69
                udiv null, r2.x, r1.y, cb0[12].w  // r2.x <- tempUV.x
                
                #line 70
                udiv r2.y, null, r1.y, cb0[12].w  // r2.y <- tempUV.y
                
                #line 71
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r3.x, r2.xyww, t1.xyzw
                mov r3.x, r3.x  // r3.x <- thePos.x
                
                #line 73
                mov r1.y, l(1)
                iadd r2.z, r1.y, r2.x  // r2.z <- tempUV.x
                
                #line 74
                uge r1.y, r2.z, cb0[12].w
                if_nz r1.y
                
                #line 76
                  mov r2.z, l(0)
                
                #line 77
                  mov r1.y, l(1)
                  iadd r2.y, r1.y, r2.y
                
                #line 78
                endif 
                
                #line 79
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r3.y, r2.zyww, t1.yxzw
                mov r3.y, r3.y  // r3.y <- thePos.y
                
                #line 81
                mov r1.y, l(1)
                iadd r2.x, r1.y, r2.z  // r2.x <- tempUV.x
                
                #line 82
                uge r1.y, r2.x, cb0[12].w
                if_nz r1.y
                
                #line 84
                  mov r2.x, l(0)
                
                #line 85
                  mov r1.y, l(1)
                  iadd r2.y, r1.y, r2.y
                
                #line 86
                endif 
                
                #line 87
                mov r2.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r3.z, r2.xyzz, t1.yzxw
                mov r3.z, r3.z  // r3.z <- thePos.z
                
                #line 88
                mov r3.w, l(1.000000)  // r3.w <- thePos.w
                
                #line 92
                imul null, r1.y, r0.y, cb0[13].x
                imul null, r1.z, r0.z, v0.y
                iadd r1.y, r1.z, r1.y
                udiv r1.y, null, r1.y, r0.x  // r1.y <- NormalPixelIndex
                
                #line 93
                udiv null, r2.x, r1.y, cb0[12].w
                
                #line 94
                udiv r2.y, null, r1.y, cb0[12].w
                
                #line 95
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r4.x, r2.xyww, t1.xyzw
                mov r4.x, r4.x  // r4.x <- theNormal.x
                
                #line 97
                mov r1.y, l(1)
                iadd r2.z, r1.y, r2.x  // r2.z <- tempUV.x
                
                #line 98
                uge r1.y, r2.z, cb0[12].w
                if_nz r1.y
                
                #line 100
                  mov r2.z, l(0)
                
                #line 101
                  mov r1.y, l(1)
                  iadd r2.y, r1.y, r2.y
                
                #line 102
                endif 
                
                #line 103
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r4.y, r2.zyww, t1.yxzw
                mov r4.y, r4.y  // r4.y <- theNormal.y
                
                #line 105
                mov r1.y, l(1)
                iadd r2.x, r1.y, r2.z  // r2.x <- tempUV.x
                
                #line 106
                uge r1.y, r2.x, cb0[12].w
                if_nz r1.y
                
                #line 108
                  mov r2.x, l(0)
                
                #line 109
                  mov r1.y, l(1)
                  iadd r2.y, r1.y, r2.y
                
                #line 110
                endif 
                
                #line 111
                mov r2.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r4.z, r2.xyzz, t1.yzxw
                mov r4.z, r4.z  // r4.z <- theNormal.z
                
                #line 112
                mov r4.w, l(0)  // r4.w <- theNormal.w
                
                #line 118
                ine r1.y, l(0, 0, 0, 0), cb0[14].x
                if_nz r1.y
                
                #line 120
                  imul null, r1.y, r0.y, cb0[13].x
                  imul null, r1.z, r0.z, cb0[13].y
                  iadd r1.y, r1.z, r1.y
                  imul null, r1.z, r0.w, v0.z
                  iadd r1.y, r1.z, r1.y
                  udiv r1.y, null, r1.y, r0.x  // r1.y <- TangentPixelIndex
                
                #line 121
                  udiv null, r2.x, r1.y, cb0[12].w
                
                #line 122
                  udiv r2.y, null, r1.y, cb0[12].w
                
                #line 123
                  mov r2.w, l(0)
                  ld_indexable(texture2d)(float,float,float,float) r5.x, r2.xyww, t1.xyzw  // r5.x <- theTangent.x
                
                #line 125
                  mov r1.y, l(1)
                  iadd r2.z, r1.y, r2.x  // r2.z <- tempUV.x
                
                #line 126
                  uge r1.y, r2.z, cb0[12].w
                  if_nz r1.y
                
                #line 128
                    mov r2.z, l(0)
                
                #line 129
                    mov r1.y, l(1)
                    iadd r2.y, r1.y, r2.y
                
                #line 130
                  endif 
                
                #line 131
                  mov r2.w, l(0)
                  ld_indexable(texture2d)(float,float,float,float) r5.y, r2.zyww, t1.yxzw  // r5.y <- theTangent.y
                
                #line 133
                  mov r1.y, l(1)
                  iadd r2.x, r1.y, r2.z  // r2.x <- tempUV.x
                
                #line 134
                  uge r1.y, r2.x, cb0[12].w
                  if_nz r1.y
                
                #line 136
                    mov r2.x, l(0)
                
                #line 137
                    mov r1.y, l(1)
                    iadd r2.y, r1.y, r2.y
                
                #line 138
                  endif 
                
                #line 139
                  mov r2.z, l(0)
                  ld_indexable(texture2d)(float,float,float,float) r5.z, r2.xyzz, t1.yzxw
                
                #line 140
                endif   // r5.x <- theTangent.x; r5.y <- theTangent.y; r5.z <- theTangent.z
                
                #line 144
                imul null, r0.y, r0.y, cb0[13].x
                imul null, r0.z, r0.z, cb0[13].y
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r0.w, cb0[13].z
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r1.x, v0.w
                iadd r0.y, r0.z, r0.y
                udiv r0.x, null, r0.y, r0.x  // r0.x <- UVPixelIndex
                
                #line 145
                udiv null, r1.z, r0.x, cb0[12].w  // r1.z <- tempUV.x
                
                #line 146
                udiv r1.y, null, r0.x, cb0[12].w  // r1.y <- tempUV.y
                
                #line 147
                mov r1.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.x, r1.zyww, t1.xyzw
                mov r0.x, r0.x  // r0.x <- theUV.x
                
                #line 149
                mov r0.z, l(1)
                iadd r1.x, r0.z, r1.z  // r1.x <- tempUV.x
                
                #line 150
                uge r0.z, r1.x, cb0[12].w
                if_nz r0.z
                
                #line 152
                  mov r1.x, l(0)
                
                #line 153
                  mov r0.z, l(1)
                  iadd r1.y, r0.z, r1.y
                
                #line 154
                endif 
                
                #line 155
                mov r1.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.y, r1.xyzz, t1.yxzw
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 187
                mov r3.x, r3.x  // r3.x <- thePos.x
                mov r3.y, r3.y  // r3.y <- thePos.y
                mov r3.z, r3.z  // r3.z <- thePos.z
                mov r3.w, r3.w  // r3.w <- thePos.w
                mov r4.x, r4.x  // r4.x <- theNormal.x
                mov r4.y, r4.y  // r4.y <- theNormal.y
                mov r4.z, r4.z  // r4.z <- theNormal.z
                mov r4.w, r4.w  // r4.w <- theNormal.w
                mov r5.xyz, r5.xyzx  // r5.x <- theTangent.x; r5.y <- theTangent.y; r5.z <- theTangent.z
                mov r0.x, r0.x  // r0.x <- theUV.x
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 192
                dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- thePos.x
                dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- thePos.y
                dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- thePos.z
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // r1.w <- thePos.w
                
                #line 193
                dp4 r2.x, r4.xyzw, cb0[8].xyzw  // r2.x <- theNormal.x
                dp4 r2.y, r4.xyzw, cb0[9].xyzw  // r2.y <- theNormal.y
                dp4 r2.z, r4.xyzw, cb0[10].xyzw  // r2.z <- theNormal.z
                dp4 r2.w, r4.xyzw, cb0[11].xyzw  // r2.w <- theNormal.w
                
                #line 197
                dp4 r3.x, r1.xyzw, cb0[4].xyzw  // r3.x <- output.Position.x
                dp4 r3.y, r1.xyzw, cb0[5].xyzw  // r3.y <- output.Position.y
                dp4 r3.z, r1.xyzw, cb0[6].xyzw  // r3.z <- output.Position.z
                dp4 r3.w, r1.xyzw, cb0[7].xyzw  // r3.w <- output.Position.w
                
                #line 198
                mov r0.xy, r0.xyxx  // r0.x <- output.TexCoord.x; r0.y <- output.TexCoord.y
                
                #line 199
                mov r1.xyzw, r1.xyzw  // r1.x <- output.PositionInWorld.x; r1.y <- output.PositionInWorld.y; r1.z <- output.PositionInWorld.z; r1.w <- output.PositionInWorld.w
                
                #line 200
                mov r2.xyzw, r2.xyzw  // r2.x <- output.NormalInWorld.x; r2.y <- output.NormalInWorld.y; r2.z <- output.NormalInWorld.z; r2.w <- output.NormalInWorld.w
                
                #line 201
                ine r0.z, l(0, 0, 0, 0), cb0[14].x
                if_nz r0.z
                
                #line 203
                  mov r5.w, l(0)
                  dp4 r4.x, r5.xyzw, cb0[8].xyzw  // r4.x <- theTangent.x
                  dp4 r4.y, r5.xyzw, cb0[9].xyzw  // r4.y <- theTangent.y
                  dp4 r4.z, r5.xyzw, cb0[10].xyzw  // r4.z <- theTangent.z
                
                #line 204
                  mov r4.xyz, r4.xyzx
                
                #line 205
                endif   // r4.x <- output.TangentInWorld.x; r4.y <- output.TangentInWorld.y; r4.z <- output.TangentInWorld.z
                
                #line 206
                mov o0.xyzw, r3.xyzw
                mov o2.xyzw, r1.xyzw
                mov o3.xyzw, r2.xyzw
                mov o4.xyz, r4.xyzx
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 165 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer BufferMatrix
                // {
                //
                //   float4x4 g_matWorld;               // Offset:    0 Size:    64 [unused]
                //   float4x4 g_matViewProj;            // Offset:   64 Size:    64 [unused]
                //   float4x4 g_matWorldInvTranspose;   // Offset:  128 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   uint g_VertexTextureWidth;         // Offset:  204 Size:     4 [unused]
                //   uint g_VertexTexturePosCount;      // Offset:  208 Size:     4 [unused]
                //   uint g_VertexTextureNormalCount;   // Offset:  212 Size:     4 [unused]
                //   uint g_VertexTextureTangentCount;  // Offset:  216 Size:     4 [unused]
                //   uint g_VertexTextureUVCount;       // Offset:  220 Size:     4 [unused]
                //   bool IshaveTangent;                // Offset:  224 Size:     4
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_SampleType                      sampler      NA          NA             s0      1 
                // g_TextureList[0]                  texture  float4          2d             t0      1 
                // g_NormalTexture                   texture  float4          2d             t2      1 
                // BufferMatrix                      cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyz 
                // COLOR                    1   xyzw        3     NONE   float   xyzw
                // COLOR                    2   xyz         4     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[15], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyzw
                dcl_input_ps linear v4.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   v2.x <- input.PositionInWorld.x; v2.y <- input.PositionInWorld.y; v2.z <- input.PositionInWorld.z; v2.w <- input.PositionInWorld.w; 
                //   v3.x <- input.NormalInWorld.x; v3.y <- input.NormalInWorld.y; v3.z <- input.NormalInWorld.z; v3.w <- input.NormalInWorld.w; 
                //   v4.x <- input.TangentInWorld.x; v4.y <- input.TangentInWorld.y; v4.z <- input.TangentInWorld.z; 
                //   o0.x <- <ShaderPS return value>.x; o0.y <- <ShaderPS return value>.y; o0.z <- <ShaderPS return value>.z; o0.w <- <ShaderPS return value>.w
                //
                #line 212 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk_nobone.fx"
                dp4 r0.x, v3.xyzw, v3.xyzw
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v3.xyzx  // r0.x <- input.NormalInWorld.x; r0.y <- input.NormalInWorld.y; r0.z <- input.NormalInWorld.z
                
                #line 215
                mov r1.xyz, -v2.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 218
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 221
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 228
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t0.xyzw, s0  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 229
                mov r0.xyz, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 230
                ine r0.w, l(0, 0, 0, 0), cb0[14].x
                if_nz r0.w
                
                #line 232
                  sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t2.xyzw, s0  // r3.x <- normalMapSample.x; r3.y <- normalMapSample.y; r3.z <- normalMapSample.z
                
                #line 234
                  nop 
                  mov r3.xyz, r3.xyzx
                  mov r4.xyz, r0.xyzx
                  mov r5.xyz, v4.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                  mul r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                  mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                  add r3.xyz, r3.xyzx, r6.xyzx  // r3.x <- normalT.x; r3.y <- normalT.y; r3.z <- normalT.z
                
                #line 205
                  mov r4.xyz, r4.xyzx  // r4.x <- N.x; r4.y <- N.y; r4.z <- N.z
                
                #line 206
                  dp3 r0.w, r5.zxyz, r4.xyzx
                  mul r6.xyz, r4.yzxy, r0.wwww
                  mov r6.xyz, -r6.xyzx
                  add r5.xyz, r5.xyzx, r6.xyzx
                  dp3 r0.w, r5.xyzx, r5.xyzx
                  rsq r0.w, r0.w
                  mul r5.xyz, r0.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                  mul r6.xyz, r4.yzxy, r5.yzxy
                  mul r7.xyz, r4.zxyz, r5.xyzx
                  mov r7.xyz, -r7.xyzx
                  add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                  mov r7.x, r5.z  // r7.x <- TBN._m00
                  mov r7.y, r6.x  // r7.y <- TBN._m10
                  mov r7.z, r4.x  // r7.z <- TBN._m20
                  mov r8.x, r5.x  // r8.x <- TBN._m01
                  mov r8.y, r6.y  // r8.y <- TBN._m11
                  mov r8.z, r4.y  // r8.z <- TBN._m21
                  mov r4.x, r5.y  // r4.x <- TBN._m02
                  mov r4.y, r6.z  // r4.y <- TBN._m12
                  mov r4.z, r4.z  // r4.z <- TBN._m22
                
                #line 212
                  dp3 r0.x, r3.xyzx, r7.xyzx  // r0.x <- bumpedNormalW.x
                  dp3 r0.y, r3.xyzx, r8.xyzx  // r0.y <- bumpedNormalW.y
                  dp3 r0.z, r3.xyzx, r4.xyzx  // r0.z <- bumpedNormalW.z
                
                #line 214
                  mov r0.xyz, r0.xyzx  // r0.x <- <NormalSampleToWorldSpace return value>.x; r0.y <- <NormalSampleToWorldSpace return value>.y; r0.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 234 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk_nobone.fx"
                  mov r0.xyz, r0.xyzx  // r0.x <- bumpedNormalW.x; r0.y <- bumpedNormalW.y; r0.z <- bumpedNormalW.z
                
                #line 235
                endif 
                
                #line 242
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 243
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 244
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 251
                mov r6.xyz, l(0.500000,0.500000,0.500000,0)  // r6.x <- gDirLights.Ambient.x; r6.y <- gDirLights.Ambient.y; r6.z <- gDirLights.Ambient.z
                
                #line 252
                mov r7.xyz, l(0.600000,0.600000,0.600000,0)  // r7.x <- gDirLights.Diffuse.x; r7.y <- gDirLights.Diffuse.y; r7.z <- gDirLights.Diffuse.z
                
                #line 253
                mov r8.xyz, l(0.500000,0.500000,0.500000,0)  // r8.x <- gDirLights.Specular.x; r8.y <- gDirLights.Specular.y; r8.z <- gDirLights.Specular.z
                
                #line 254
                mov r9.xyz, l(0.577350,-0.577350,-0.577350,0)  // r9.x <- gDirLights.Direction.x; r9.y <- gDirLights.Direction.y; r9.z <- gDirLights.Direction.z
                
                #line 259
                mov r10.xyz, l(0.700000,0.700000,0.700000,0)  // r10.x <- mMat.Ambient.x; r10.y <- mMat.Ambient.y; r10.z <- mMat.Ambient.z
                
                #line 260
                mov r11.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r11.x <- mMat.Diffuse.x; r11.y <- mMat.Diffuse.y; r11.z <- mMat.Diffuse.z; r11.w <- mMat.Diffuse.w
                
                #line 261
                mov r12.xyzw, l(0.500000,0.500000,0.500000,16.000000)  // r12.x <- mMat.Specular.x; r12.y <- mMat.Specular.y; r12.z <- mMat.Specular.z; r12.w <- mMat.Specular.w
                
                #line 265
                nop 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                mov r12.xyzw, r12.xyzw
                mov r6.xyz, r6.xyzx
                mov r7.xyz, r7.xyzx
                mov r8.xyz, r8.xyzx
                mov r9.xyz, r9.xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r9.xyz, -r9.xyzx  // r9.x <- lightVec.x; r9.y <- lightVec.y; r9.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r10.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r9.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r9.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r12.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r11.xxyz, r0.wwww
                mul r0.yzw, r7.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r12.xyzx, r0.xxxx
                mul r1.xyz, r8.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 265 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\Shadowkk_nobone.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 266
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 267
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 268
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 271
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 273
                mul r0.w, r2.w, r11.w  // r0.w <- litColor.w
                
                #line 275
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 276
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 108 instruction slots used
                            
            };
        }

    }

}

