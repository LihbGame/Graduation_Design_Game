//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 2 local object(s)
//
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 22 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 86 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyz, l(1, 1, 1, 0)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 86 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyz, l(1, 1, 1, 0)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 86 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyz, l(1, 1, 1, 0)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 86 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyz, l(1, 1, 1, 0)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 86 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyz, l(1, 1, 1, 0)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 86 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyz, l(1, 1, 1, 0)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v3.xyxx, t0.xyzw, s0
                mov r0.xyz, r0.xyzx  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 7 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 58 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 59
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 62
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 66
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 67
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 68
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap                       texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 90 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 97
                mov r1.x, l(-0.100000)
                add r0.w, r0.w, r1.x
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 105
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 144
                itof r0.w, l(1)  // r0.w <- litColor.w
                
                #line 145
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
        }

    }

}

