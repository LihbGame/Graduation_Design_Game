//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights;        // Offset:    0, size:   64
    float3  gEyePosW;                   // Offset:   64, size:   12
    float   gFogStart;                  // Offset:   76, size:    4
    float   gFogRange;                  // Offset:   80, size:    4
    float4  gFogColor;                  // Offset:   96, size:   16
    float4x4 gShadowTransform;          // Offset:  112, size:   64
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 6 local object(s)
//
Texture2D gDiffuseMap[5];
Texture2D gNormalMap[5];
Texture2D gShadowMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerComparisonState samShadow
{
    Filter   = uint(COMPARISON_MIN_MAG_LINEAR_MIP_POINT /* 148 */);
    AddressU = uint(BORDER /* 4 */);
    AddressV = uint(BORDER /* 4 */);
    AddressW = uint(BORDER /* 4 */);
    BorderColor = float4(1, 1, 1, 0);
    ComparisonFunc = uint(LESS /* 2 */);
};
SamplerState SampleLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    MipLODBias = float(0);
    MaxAnisotropy = uint(1);
    ComparisonFunc = uint(ALWAYS /* 8 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 22 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samShadow                       sampler_c      NA          NA             s0      1 
                // gShadowMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint       
                // INDEX                    1    y          6     NONE    uint       
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 154 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samShadow                       sampler_c      NA          NA             s0      1 
                // gShadowMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint       
                // INDEX                    1    y          6     NONE    uint       
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 193 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samShadow                       sampler_c      NA          NA             s0      1 
                // gShadowMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint       
                // INDEX                    1    y          6     NONE    uint       
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r6.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r6.xyzx
                
                #line 211
                mul r6.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 232 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float       
                // NORMAL                   0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float       
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v4.xy
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0, r1.x
                
                #line 153
                  break 
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t1.xyzw, s0, r1.x
                
                #line 157
                  break 
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t2.xyzw, s0, r1.x
                
                #line 161
                  break 
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t3.xyzw, s0, r1.x
                
                #line 165
                  break 
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t4.xyzw, s0, r1.x
                
                #line 169
                  break 
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                
                #line 187
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 31 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 193 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 106
                mov r5.xyz, l(0,1.000000,0,0)  // r5.x <- ClipPlane.x; r5.y <- ClipPlane.y; r5.z <- ClipPlane.z
                
                #line 107
                dp3 r0.w, r0.xyzx, r5.xyzx  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 49 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 193 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r6.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r6.xyzx
                
                #line 211
                mul r6.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 271 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float       
                // NORMAL                   0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float       
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v4.xy
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0, r1.x
                
                #line 153
                  break 
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t1.xyzw, s0, r1.x
                
                #line 157
                  break 
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t2.xyzw, s0, r1.x
                
                #line 161
                  break 
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t3.xyzw, s0, r1.x
                
                #line 165
                  break 
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t4.xyzw, s0, r1.x
                
                #line 169
                  break 
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 183
                nop 
                
                #line 187
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r3.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 198 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r3.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 237 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r3.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r6.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r6.xyzx
                
                #line 211
                mul r6.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 276 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samShadow                       sampler_c      NA          NA             s0      1 
                // gShadowMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint       
                // INDEX                    1    y          6     NONE    uint       
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 154 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samShadow                       sampler_c      NA          NA             s0      1 
                // gShadowMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint       
                // INDEX                    1    y          6     NONE    uint       
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 193 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samShadow                       sampler_c      NA          NA             s0      1 
                // gShadowMap                        texture  float4          2d             t0      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float       
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint       
                // INDEX                    1    y          6     NONE    uint       
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v5.xyz
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.xxxx, s0, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t0.xxxx, s0, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r6.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r6.xyzx
                
                #line 211
                mul r6.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 232 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float       
                // NORMAL                   0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float       
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v4.xy
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0, r1.x
                
                #line 153
                  break 
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t1.xyzw, s0, r1.x
                
                #line 157
                  break 
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t2.xyzw, s0, r1.x
                
                #line 161
                  break 
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t3.xyzw, s0, r1.x
                
                #line 165
                  break 
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t4.xyzw, s0, r1.x
                
                #line 169
                  break 
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                
                #line 187
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 31 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 193 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 232 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r6.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r6.xyzx
                
                #line 211
                mul r6.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 271 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float       
                // NORMAL                   0   xyz         3     NONE   float       
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float       
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v4.xy
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t0.xyzw, s0, r1.x
                
                #line 153
                  break 
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t1.xyzw, s0, r1.x
                
                #line 157
                  break 
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t2.xyzw, s0, r1.x
                
                #line 161
                  break 
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t3.xyzw, s0, r1.x
                
                #line 165
                  break 
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.x, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v4.xyxx, t4.xyzw, s0, r1.x
                
                #line 169
                  break 
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 183
                nop 
                
                #line 187
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 36 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r3.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r6.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 198 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r3.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 237 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64 [unused]
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TANGENT                  0   xyz         3     NONE   float   xyz 
                // WORLD                    0   xyzw        4     NONE   float   xyz 
                // WORLD                    1   xyzw        5     NONE   float   xyz 
                // WORLD                    2   xyzw        6     NONE   float   xyz 
                // WORLD                    3   xyzw        7     NONE   float   xyz 
                // INDEX                    0   x           8     NONE    uint   x   
                // SV_InstanceID            0   x           9   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // SV_ClipDistance          0   x           1  CLIPDST   float   x   
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[11], immediateIndexed
                dcl_constantbuffer CB1[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyz
                dcl_input v8.x
                dcl_output_siv o0.xyzw, position
                dcl_output_siv o1.x, clip_distance
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_output o5.xyz
                dcl_output o6.x
                dcl_output o6.y
                dcl_output o7.xyzw
                dcl_temps 6
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.TangentL.x; v3.y <- vin.TangentL.y; v3.z <- vin.TangentL.z; 
                //   v4.x <- vin.World._m00; v4.y <- vin.World._m01; v4.z <- vin.World._m02; v4.w <- vin.World._m03; 
                //   v5.x <- vin.World._m10; v5.y <- vin.World._m11; v5.z <- vin.World._m12; v5.w <- vin.World._m13; 
                //   v6.x <- vin.World._m20; v6.y <- vin.World._m21; v6.z <- vin.World._m22; v6.w <- vin.World._m23; 
                //   v7.x <- vin.World._m30; v7.y <- vin.World._m31; v7.z <- vin.World._m32; v7.w <- vin.World._m33; 
                //   v8.x <- vin.TexIndex; 
                //   v9.x <- vin.InstanceId; 
                //   o7.x <- <VS return value>.ShadowPosH.x; o7.y <- <VS return value>.ShadowPosH.y; o7.z <- <VS return value>.ShadowPosH.z; o7.w <- <VS return value>.ShadowPosH.w; 
                //   o6.x <- <VS return value>.TexIndex; o6.y <- <VS return value>.MipmapIndex; 
                //   o5.x <- <VS return value>.TangentW.x; o5.y <- <VS return value>.TangentW.y; o5.z <- <VS return value>.TangentW.z; 
                //   o4.x <- <VS return value>.Tex.x; o4.y <- <VS return value>.Tex.y; 
                //   o3.x <- <VS return value>.NormalW.x; o3.y <- <VS return value>.NormalW.y; o3.z <- <VS return value>.NormalW.z; 
                //   o2.x <- <VS return value>.PosW.x; o2.y <- <VS return value>.PosW.y; o2.z <- <VS return value>.PosW.z; 
                //   o1.x <- <VS return value>.ClipValue; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 94 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v4.xyzx
                mul r1.xyz, v0.yyyy, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v6.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v7.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 95
                mul r1.xyz, v1.xxxx, v4.xyzx
                mul r2.xyz, v1.yyyy, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v6.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 96
                mul r2.xyz, v3.xxxx, v4.xyzx
                mul r3.xyz, v3.yyyy, v5.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx
                mul r3.xyz, v3.zzzz, v6.xyzx
                add r2.xyz, r2.xyzx, r3.xyzx  // r2.x <- vout.TangentW.x; r2.y <- vout.TangentW.y; r2.z <- vout.TangentW.z
                
                #line 98
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[8].xyzw  // r3.x <- vout.PosH.x
                dp4 r3.y, r0.xyzw, cb1[9].xyzw  // r3.y <- vout.PosH.y
                dp4 r3.z, r0.xyzw, cb1[10].xyzw  // r3.z <- vout.PosH.z
                dp4 r3.w, r0.xyzw, cb1[11].xyzw  // r3.w <- vout.PosH.w
                
                #line 101
                dp4 r4.x, r0.xyzw, cb0[7].xyzw  // r4.x <- vout.ShadowPosH.x
                dp4 r4.y, r0.xyzw, cb0[8].xyzw  // r4.y <- vout.ShadowPosH.y
                dp4 r4.z, r0.xyzw, cb0[9].xyzw  // r4.z <- vout.ShadowPosH.z
                dp4 r4.w, r0.xyzw, cb0[10].xyzw  // r4.w <- vout.ShadowPosH.w
                
                #line 111
                mov r0.w, l(1.000000)  // r0.w <- vout.ClipValue
                
                #line 114
                mov r5.xyz, -r0.xyzx
                add r5.xyz, r5.xyzx, cb0[4].xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                sqrt r1.w, r1.w
                itof r2.w, l(60)
                div r1.w, r1.w, r2.w
                itof r2.w, l(1)
                add r1.w, r1.w, r2.w
                ftou r1.w, r1.w  // r1.w <- vout.MipmapIndex
                
                #line 119
                mov r2.w, v8.x  // r2.w <- vout.TexIndex
                
                #line 120
                mov r5.xy, v2.xyxx  // r5.x <- vout.Tex.x; r5.y <- vout.Tex.y
                
                #line 121
                mov o0.xyzw, r3.xyzw
                mov o7.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o5.xyz, r2.xyzx
                mov o4.xy, r5.xyxx
                mov o1.x, r0.w
                mov o6.x, r2.w
                mov o6.y, r1.w
                ret 
                // Approximately 48 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //   float4x4 gShadowTransform;         // Offset:  112 Size:    64 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // samShadow                       sampler_c      NA          NA             s1      1 
                // gDiffuseMap[0]                    texture  float4          2d             t0      1 
                // gDiffuseMap[1]                    texture  float4          2d             t1      1 
                // gDiffuseMap[2]                    texture  float4          2d             t2      1 
                // gDiffuseMap[3]                    texture  float4          2d             t3      1 
                // gDiffuseMap[4]                    texture  float4          2d             t4      1 
                // gNormalMap[0]                     texture  float4          2d             t5      1 
                // gNormalMap[1]                     texture  float4          2d             t6      1 
                // gNormalMap[2]                     texture  float4          2d             t7      1 
                // gNormalMap[3]                     texture  float4          2d             t8      1 
                // gNormalMap[4]                     texture  float4          2d             t9      1 
                // gShadowMap                        texture  float4          2d            t10      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // SV_ClipDistance          0   x           1  CLIPDST   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // TEXCOORD                 0   xy          4     NONE   float   xy  
                // TANGENT                  0   xyz         5     NONE   float   xyz 
                // INDEX                    0   x           6     NONE    uint   x   
                // INDEX                    1    y          6     NONE    uint    y  
                // TEXCOORD                 1   xyzw        7     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_comparison
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_resource_texture2d (float,float,float,float) t5
                dcl_resource_texture2d (float,float,float,float) t6
                dcl_resource_texture2d (float,float,float,float) t7
                dcl_resource_texture2d (float,float,float,float) t8
                dcl_resource_texture2d (float,float,float,float) t9
                dcl_resource_texture2d (float,float,float,float) t10
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xy
                dcl_input_ps linear v5.xyz
                dcl_input_ps constant v6.x
                dcl_input_ps constant v6.y
                dcl_input_ps linear v7.xyzw
                dcl_output o0.xyzw
                dcl_temps 15
                dcl_indexableTemp x0[9], 4
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.ClipValue; 
                //   v2.x <- pin.PosW.x; v2.y <- pin.PosW.y; v2.z <- pin.PosW.z; 
                //   v3.x <- pin.NormalW.x; v3.y <- pin.NormalW.y; v3.z <- pin.NormalW.z; 
                //   v4.x <- pin.Tex.x; v4.y <- pin.Tex.y; 
                //   v5.x <- pin.TangentW.x; v5.y <- pin.TangentW.y; v5.z <- pin.TangentW.z; 
                //   v6.x <- pin.TexIndex; v6.y <- pin.MipmapIndex; 
                //   v7.x <- pin.ShadowPosH.x; v7.y <- pin.ShadowPosH.y; v7.z <- pin.ShadowPosH.z; v7.w <- pin.ShadowPosH.w; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 223 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r0.x, l(0.000488)  // r0.x <- SMAP_DX
                
                #line 127 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r1.x, v3.xyzx, v3.xyzx
                rsq r1.x, r1.x
                mul r1.xyz, r1.xxxx, v3.xyzx  // r1.x <- pin.NormalW.x; r1.y <- pin.NormalW.y; r1.z <- pin.NormalW.z
                
                #line 130
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx  // r2.x <- toEye.x; r2.y <- toEye.y; r2.z <- toEye.z
                
                #line 133
                dp3 r1.w, r2.xyzx, r2.xyzx
                sqrt r1.w, r1.w  // r1.w <- distToEye
                
                #line 136
                div r2.xyz, r2.xyzx, r1.wwww
                
                #line 142
                itof r3.xyzw, l(1, 1, 1, 1)  // r3.x <- texColor.x; r3.y <- texColor.y; r3.z <- texColor.z; r3.w <- texColor.w
                
                #line 143
                itof r4.xyz, l(1, 1, 1, 0)  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 148
                switch v6.x
                
                #line 150
                  case l(0)
                
                #line 151
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t0.xyzw, s0, r1.w
                
                #line 152
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t5.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 153
                  break   // r1.w <- distToEye
                
                #line 154
                  case l(1)
                
                #line 155
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t1.xyzw, s0, r1.w
                
                #line 156
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t6.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 157
                  break   // r1.w <- distToEye
                
                #line 158
                  case l(2)
                
                #line 159
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t2.xyzw, s0, r1.w
                
                #line 160
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t7.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 161
                  break   // r1.w <- distToEye
                
                #line 162
                  case l(3)
                
                #line 163
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t3.xyzw, s0, r1.w
                
                #line 164
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t8.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 165
                  break   // r1.w <- distToEye
                
                #line 166
                  case l(4)
                
                #line 167
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r3.xyzw, v4.xyxx, t4.xyzw, s0, r1.w
                
                #line 168
                  utof r1.w, v6.y
                  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, v4.xyxx, t9.xyzw, s0, r1.w
                  mov r4.xyz, r4.xyzx  // r4.x <- normalMapSample.x; r4.y <- normalMapSample.y; r4.z <- normalMapSample.z
                
                #line 169
                  break   // r1.w <- distToEye
                
                #line 170
                  default 
                  break 
                endswitch 
                
                #line 178
                mov r1.w, l(-0.100000)
                add r1.w, r1.w, r3.w
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard_nz r1.w
                
                #line 183
                nop 
                mov r4.xyz, r4.xyzx
                mov r1.xyz, r1.xyzx
                mov r5.xyz, v5.yzxy
                
                #line 202 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mul r4.xyz, r4.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000)
                mov r6.xyz, l(-1.000000,-1.000000,-1.000000,-0.000000)
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- normalT.x; r4.y <- normalT.y; r4.z <- normalT.z
                
                #line 205
                mov r1.xyz, r1.xyzx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z
                
                #line 206
                dp3 r1.w, r5.zxyz, r1.xyzx
                mul r6.xyz, r1.yzxy, r1.wwww
                mov r6.xyz, -r6.xyzx
                add r5.xyz, r5.xyzx, r6.xyzx
                dp3 r1.w, r5.xyzx, r5.xyzx
                rsq r1.w, r1.w
                mul r5.xyz, r1.wwww, r5.xyzx  // r5.x <- T.y; r5.y <- T.z; r5.z <- T.x
                
                #line 207
                mul r6.xyz, r1.yzxy, r5.yzxy
                mul r7.xyz, r1.zxyz, r5.xyzx
                mov r7.xyz, -r7.xyzx
                add r6.xyz, r6.xyzx, r7.xyzx  // r6.x <- B.x; r6.y <- B.y; r6.z <- B.z
                
                #line 209
                mov r7.x, r5.z  // r7.x <- TBN._m00
                mov r7.y, r6.x  // r7.y <- TBN._m10
                mov r7.z, r1.x  // r7.z <- TBN._m20
                mov r8.x, r5.x  // r8.x <- TBN._m01
                mov r8.y, r6.y  // r8.y <- TBN._m11
                mov r8.z, r1.y  // r8.z <- TBN._m21
                mov r1.x, r5.y  // r1.x <- TBN._m02
                mov r1.y, r6.z  // r1.y <- TBN._m12
                mov r1.z, r1.z  // r1.z <- TBN._m22
                
                #line 212
                dp3 r5.x, r4.xyzx, r7.xyzx  // r5.x <- bumpedNormalW.x
                dp3 r5.y, r4.xyzx, r8.xyzx  // r5.y <- bumpedNormalW.y
                dp3 r5.z, r4.xyzx, r1.xyzx  // r5.z <- bumpedNormalW.z
                
                #line 214
                mov r5.xyz, r5.xyzx  // r5.x <- <NormalSampleToWorldSpace return value>.x; r5.y <- <NormalSampleToWorldSpace return value>.y; r5.z <- <NormalSampleToWorldSpace return value>.z
                
                #line 183 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r5.xyz, r5.xyzx  // r5.x <- bumpedNormalW.x; r5.y <- bumpedNormalW.y; r5.z <- bumpedNormalW.z
                
                #line 191
                mov r1.xyz, l(0,0,0,0)  // r1.x <- ambient.x; r1.y <- ambient.y; r1.z <- ambient.z
                
                #line 192
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 193
                mov r6.xyz, l(0,0,0,0)  // r6.x <- spec.x; r6.y <- spec.y; r6.z <- spec.z
                
                #line 196
                nop 
                nop 
                nop 
                mov r7.xyzw, v7.xyzw
                
                #line 230 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                div r7.xyz, r7.zxyz, r7.wwww  // r7.x <- shadowPosH.z; r7.y <- shadowPosH.x; r7.z <- shadowPosH.y
                
                #line 233
                mov r7.x, r7.x  // r7.x <- depth
                
                #line 236
                mov r0.x, r0.x  // r0.x <- dx
                
                #line 238
                mov r1.w, l(0)  // r1.w <- percentLit
                
                #line 239
                mov x0[0].xy, l(-0.000488,-0.000488,0,0)
                mov x0[1].xy, l(0,-0.000488,0,0)
                mov r0.y, l(-0.000488)
                mov x0[2].xy, r0.xyxx
                mov x0[3].xy, l(-0.000488,0,0,0)
                mov x0[4].xy, l(0,0,0,0)
                mov r0.z, l(0)
                mov x0[5].xy, r0.xzxx
                mov x0[6].xy, l(-0.000488,0.000488,0,0)
                mov x0[7].xy, l(0,0.000488,0,0)
                mov r0.w, l(0.000488)
                mov x0[8].xy, r0.xwxx
                
                #line 249
                mov r0.xy, x0[0].xyxx
                add r0.xy, r0.xyxx, r7.yzyy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t10.xxxx, s1, r7.x
                add r0.x, r0.x, r1.w  // r0.x <- percentLit
                mov r0.yz, x0[1].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[2].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[3].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[4].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[5].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[6].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[7].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                mov r0.yz, x0[8].xxyx
                add r0.yz, r0.yyzy, r7.yyzy
                sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t10.xxxx, s1, r7.x
                add r0.x, r0.y, r0.x
                
                #line 253
                div r0.x, r0.x, l(9.000000)
                mov r0.x, r0.x  // r0.x <- <CalcShadowFactor return value>
                
                #line 196 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.x, r0.x  // r0.x <- shadow
                
                #line 206
                nop 
                mov r0.yzw, cb1[16].xxyz
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r5.xyz, r5.xyzx
                mov r2.xyz, r2.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r0.yzw, r0.yyzw, r9.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx  // r1.w <- diffuseFactor
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r0.yzw, r0.yyzw  // r0.y <- A.x; r0.z <- A.y; r0.w <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r1.xxyz  // r0.y <- ambient.x; r0.z <- ambient.y; r0.w <- ambient.z
                
                #line 210
                mul r1.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r4.xyzx  // r1.x <- diffuse.x; r1.y <- diffuse.y; r1.z <- diffuse.z
                
                #line 211
                mul r4.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx  // r4.x <- spec.x; r4.y <- spec.y; r4.z <- spec.z
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r12.xyz, r4.wwww, r5.xyzx
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r4.w, r9.xyzx, r2.xyzx
                max r4.w, r4.w, l(0.000000)
                log r4.w, r4.w
                mul r4.w, r4.w, r8.w
                exp r4.w, r4.w  // r4.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r1.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r4.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r2.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r2.wwww, r8.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r6.xyz, r0.xxxx, r7.xyzx
                add r1.xyz, r1.xyzx, r6.xyzx
                
                #line 211
                mul r6.xyz, r0.xxxx, r8.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                
                #line 206
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r1.w, r12.xyzx, r5.xyzx
                
                #line 76
                lt r2.w, l(0.000000), r1.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r4.w, r9.xyzx, r5.xyzx
                add r4.w, r4.w, r4.w
                mov r4.w, -r4.w
                mul r5.xyz, r4.wwww, r5.xyzx
                add r5.xyz, r9.xyzx, r5.xyzx  // r5.x <- v.x; r5.y <- v.y; r5.z <- v.z
                
                #line 79
                dp3 r2.x, r5.xyzx, r2.xyzx
                max r2.x, r2.x, l(0.000000)
                log r2.x, r2.x
                mul r2.x, r2.x, r8.w
                exp r2.x, r2.x  // r2.x <- specFactor
                
                #line 81
                mul r5.xyz, r7.xyzx, r1.wwww
                mul r5.xyz, r10.xyzx, r5.xyzx  // r5.x <- diffuse.x; r5.y <- diffuse.y; r5.z <- diffuse.z
                
                #line 82
                mul r2.xyz, r8.xyzx, r2.xxxx
                mul r2.xyz, r11.xyzx, r2.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 83
                movc r5.xyz, r2.wwww, r5.xyzx, r13.xyzx
                movc r2.xyz, r2.wwww, r2.xyzx, r14.xyzx
                
                #line 206 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r5.xyz, r5.xyzx  // r5.x <- D.x; r5.y <- D.y; r5.z <- D.z
                mov r2.xyz, r2.xyzx  // r2.x <- S.x; r2.y <- S.y; r2.z <- S.z
                
                #line 209
                add r0.yzw, r0.yyzw, r6.xxyz
                
                #line 210
                mul r5.xyz, r0.xxxx, r5.xyzx
                add r1.xyz, r1.xyzx, r5.xyzx
                
                #line 211
                mul r2.xyz, r0.xxxx, r2.xyzx
                add r2.xyz, r2.xyzx, r4.xyzx  // r2.x <- spec.x; r2.y <- spec.y; r2.z <- spec.z
                
                #line 215
                add r0.xyz, r0.yzwy, r1.xyzx
                mul r0.xyz, r0.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 231
                mul r0.w, r3.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 232
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 276 instruction slots used
                            
            };
        }

    }

}

