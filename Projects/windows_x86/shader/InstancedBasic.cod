//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights;        // Offset:    0, size:   64
    float3  gEyePosW;                   // Offset:   64, size:   12
    float   gFogStart;                  // Offset:   76, size:    4
    float   gFogRange;                  // Offset:   80, size:    4
    float4  gFogColor;                  // Offset:   96, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

//
// 6 local object(s)
//
Texture2D gDiffuseMap0;
Texture2D gDiffuseMap1;
Texture2D gDiffuseMap2;
Texture2D gDiffuseMap3;
Texture2D gDiffuseMap4;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 22 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 58 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 95 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 132 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 91 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 128
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 77 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 114 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 151 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 91 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 128
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 30 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 119 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 156 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 58 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 95 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float       
                // INDEX                    0   x           4     NONE    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 132 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 91 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 128
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 77 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 114 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 151 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float       
                // NORMAL                   0   xyz         2     NONE   float       
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 91 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                itof r0.xyzw, l(1, 1, 1, 1)  // r0.x <- texColor.x; r0.y <- texColor.y; r0.z <- texColor.z; r0.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 128
                mov r0.xyz, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r0.w, cb0[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 30 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 82 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 119 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // cbPerObject                       cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // INDEX                    0   x           7     NONE    uint   x   
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.x
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_output o4.x
                dcl_temps 4
                //
                // Initial variable locations:
                //   v0.x <- vin.PosL.x; v0.y <- vin.PosL.y; v0.z <- vin.PosL.z; 
                //   v1.x <- vin.NormalL.x; v1.y <- vin.NormalL.y; v1.z <- vin.NormalL.z; 
                //   v2.x <- vin.Tex.x; v2.y <- vin.Tex.y; 
                //   v3.x <- vin.World._m00; v3.y <- vin.World._m01; v3.z <- vin.World._m02; v3.w <- vin.World._m03; 
                //   v4.x <- vin.World._m10; v4.y <- vin.World._m11; v4.z <- vin.World._m12; v4.w <- vin.World._m13; 
                //   v5.x <- vin.World._m20; v5.y <- vin.World._m21; v5.z <- vin.World._m22; v5.w <- vin.World._m23; 
                //   v6.x <- vin.World._m30; v6.y <- vin.World._m31; v6.z <- vin.World._m32; v6.w <- vin.World._m33; 
                //   v7.x <- vin.TexIndex; 
                //   v8.x <- vin.InstanceId; 
                //   o4.x <- <VS return value>.TexIndex; 
                //   o3.x <- <VS return value>.Tex.x; o3.y <- <VS return value>.Tex.y; 
                //   o2.x <- <VS return value>.NormalW.x; o2.y <- <VS return value>.NormalW.y; o2.z <- <VS return value>.NormalW.z; 
                //   o1.x <- <VS return value>.PosW.x; o1.y <- <VS return value>.PosW.y; o1.z <- <VS return value>.PosW.z; 
                //   o0.x <- <VS return value>.PosH.x; o0.y <- <VS return value>.PosH.y; o0.z <- <VS return value>.PosH.z; o0.w <- <VS return value>.PosH.w
                //
                #line 63 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                
                #line 64
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx  // r1.x <- vout.NormalW.x; r1.y <- vout.NormalW.y; r1.z <- vout.NormalW.z
                
                #line 67
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw  // r2.x <- vout.PosH.x
                dp4 r2.y, r0.xyzw, cb0[9].xyzw  // r2.y <- vout.PosH.y
                dp4 r2.z, r0.xyzw, cb0[10].xyzw  // r2.z <- vout.PosH.z
                dp4 r2.w, r0.xyzw, cb0[11].xyzw  // r2.w <- vout.PosH.w
                
                #line 71
                mov r0.w, v7.x  // r0.w <- vout.TexIndex
                
                #line 72
                mov r3.xy, v2.xyxx  // r3.x <- vout.Tex.x; r3.y <- vout.Tex.y
                
                #line 73
                mov o0.xyzw, r2.xyzw
                mov o1.xyz, r0.xyzx
                mov o2.xyz, r1.xyzx
                mov o3.xy, r3.xyxx
                mov o4.x, r0.w
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights;                      // Offset:    0 Size:    64
                //   float3 gEyePosW;                   // Offset:   64 Size:    12
                //   float gFogStart;                   // Offset:   76 Size:     4 [unused]
                //   float gFogRange;                   // Offset:   80 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:   96 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // samAnisotropic                    sampler      NA          NA             s0      1 
                // gDiffuseMap0                      texture  float4          2d             t0      1 
                // gDiffuseMap1                      texture  float4          2d             t1      1 
                // gDiffuseMap2                      texture  float4          2d             t2      1 
                // gDiffuseMap3                      texture  float4          2d             t3      1 
                // gDiffuseMap4                      texture  float4          2d             t4      1 
                // cbPerFrame                        cbuffer      NA          NA            cb0      1 
                // cbPerObject                       cbuffer      NA          NA            cb1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // POSITION                 0   xyz         1     NONE   float   xyz 
                // NORMAL                   0   xyz         2     NONE   float   xyz 
                // TEXCOORD                 0   xy          3     NONE   float   xy  
                // INDEX                    0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[5], immediateIndexed
                dcl_constantbuffer CB1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_input_ps constant v4.x
                dcl_output o0.xyzw
                dcl_temps 15
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.PosW.x; v1.y <- pin.PosW.y; v1.z <- pin.PosW.z; 
                //   v2.x <- pin.NormalW.x; v2.y <- pin.NormalW.y; v2.z <- pin.NormalW.z; 
                //   v3.x <- pin.Tex.x; v3.y <- pin.Tex.y; 
                //   v4.x <- pin.TexIndex; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 79 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // r0.x <- pin.NormalW.x; r0.y <- pin.NormalW.y; r0.z <- pin.NormalW.z
                
                #line 82
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[4].xyzx  // r1.x <- toEye.x; r1.y <- toEye.y; r1.z <- toEye.z
                
                #line 85
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // r0.w <- distToEye
                
                #line 88
                div r1.xyz, r1.xyzx, r0.wwww
                
                #line 91
                itof r2.xyzw, l(1, 1, 1, 1)  // r2.x <- texColor.x; r2.y <- texColor.y; r2.z <- texColor.z; r2.w <- texColor.w
                
                #line 95
                switch v4.x
                
                #line 97
                  case l(0)
                
                #line 98
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t0.xyzw, s0
                
                #line 99
                  break 
                
                #line 100
                  case l(1)
                
                #line 101
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t1.xyzw, s0
                
                #line 102
                  break 
                
                #line 103
                  case l(2)
                
                #line 104
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t2.xyzw, s0
                
                #line 105
                  break 
                
                #line 106
                  case l(3)
                
                #line 107
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t3.xyzw, s0
                
                #line 108
                  break 
                
                #line 109
                  case l(4)
                
                #line 110
                  sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v3.xyxx, t4.xyzw, s0
                
                #line 111
                  break 
                
                #line 112
                  default 
                  break 
                endswitch 
                
                #line 120
                mov r0.w, l(-0.100000)
                add r0.w, r0.w, r2.w
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard_nz r0.w
                
                #line 132
                mov r3.xyz, l(0,0,0,0)  // r3.x <- ambient.x; r3.y <- ambient.y; r3.z <- ambient.z
                
                #line 133
                mov r4.xyz, l(0,0,0,0)  // r4.x <- diffuse.x; r4.y <- diffuse.y; r4.z <- diffuse.z
                
                #line 134
                mov r5.xyz, l(0,0,0,0)  // r5.x <- spec.x; r5.y <- spec.y; r5.z <- spec.z
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx
                mov r7.xyz, cb1[17].xyzx
                mov r8.xyzw, cb1[18].xyzw
                mov r9.xyz, cb0[0].xyzx
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx
                mov r0.xyz, r0.xyzx
                mov r1.xyz, r1.xyzx
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx  // r0.w <- diffuseFactor
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r12.xyz, r0.xyzx, r3.wwww
                add r9.xyz, r9.xyzx, r12.xyzx  // r9.x <- v.x; r9.y <- v.y; r9.z <- v.z
                
                #line 79
                dp3 r3.w, r9.xyzx, r1.xyzx
                max r3.w, r3.w, l(0.000000)
                log r3.w, r3.w
                mul r3.w, r3.w, r8.w
                exp r3.w, r3.w  // r3.w <- specFactor
                
                #line 81
                mul r7.xyz, r7.xyzx, r0.wwww
                mul r7.xyz, r10.xyzx, r7.xyzx  // r7.x <- diffuse.x; r7.y <- diffuse.y; r7.z <- diffuse.z
                
                #line 82
                mul r8.xyz, r8.xyzx, r3.wwww
                mul r8.xyz, r11.xyzx, r8.xyzx  // r8.x <- spec.x; r8.y <- spec.y; r8.z <- spec.z
                
                #line 83
                movc r7.xyz, r1.wwww, r7.xyzx, r13.xyzx
                movc r8.xyz, r1.wwww, r8.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r7.xyz, r7.xyzx  // r7.x <- D.x; r7.y <- D.y; r7.z <- D.z
                mov r8.xyz, r8.xyzx  // r8.x <- S.x; r8.y <- S.y; r8.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 147
                add r5.xyz, r5.xyzx, r8.xyzx
                
                #line 142
                nop 
                mov r6.xyz, cb1[16].xyzx  // r6.x <- mat.Ambient.x; r6.y <- mat.Ambient.y; r6.z <- mat.Ambient.z
                mov r7.xyz, cb1[17].xyzx  // r7.x <- mat.Diffuse.x; r7.y <- mat.Diffuse.y; r7.z <- mat.Diffuse.z
                mov r8.xyzw, cb1[18].xyzw  // r8.x <- mat.Specular.x; r8.y <- mat.Specular.y; r8.z <- mat.Specular.z
                mov r9.xyz, cb0[0].xyzx  // r9.x <- L.Ambient.x; r9.y <- L.Ambient.y; r9.z <- L.Ambient.z
                mov r10.xyz, cb0[1].xyzx
                mov r11.xyz, cb0[2].xyzx
                mov r12.xyz, cb0[3].xyzx  // r12.x <- L.Direction.x; r12.y <- L.Direction.y; r12.z <- L.Direction.z
                
                #line 60 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\LightHelper.fx"
                mov r13.xyz, l(0,0,0,0)  // r13.x <- diffuse.x; r13.y <- diffuse.y; r13.z <- diffuse.z
                
                #line 61
                mov r14.xyz, l(0,0,0,0)  // r14.x <- spec.x; r14.y <- spec.y; r14.z <- spec.z
                
                #line 64
                mov r12.xyz, -r12.xyzx  // r12.x <- lightVec.x; r12.y <- lightVec.y; r12.z <- lightVec.z
                
                #line 67
                mul r6.xyz, r6.xyzx, r9.xyzx  // r6.x <- ambient.x; r6.y <- ambient.y; r6.z <- ambient.z
                
                #line 72
                dp3 r0.w, r12.xyzx, r0.xyzx
                
                #line 76
                lt r1.w, l(0.000000), r0.w
                
                #line 78
                mov r9.xyz, -r12.xyzx
                dp3 r3.w, r9.xyzx, r0.xyzx
                add r3.w, r3.w, r3.w
                mov r3.w, -r3.w
                mul r0.xyz, r0.xyzx, r3.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z
                
                #line 79
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r8.w
                exp r0.x, r0.x  // r0.x <- specFactor
                
                #line 81
                mul r0.yzw, r7.xxyz, r0.wwww
                mul r0.yzw, r10.xxyz, r0.yyzw  // r0.y <- diffuse.x; r0.z <- diffuse.y; r0.w <- diffuse.z
                
                #line 82
                mul r1.xyz, r8.xyzx, r0.xxxx
                mul r1.xyz, r11.xyzx, r1.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 83
                movc r0.xyz, r1.wwww, r0.yzwy, r13.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                movc r1.xyz, r1.wwww, r1.xyzx, r14.xyzx
                
                #line 142 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\InstancedBasic.fx"
                mov r6.xyz, r6.xyzx  // r6.x <- A.x; r6.y <- A.y; r6.z <- A.z
                mov r0.xyz, r0.xyzx  // r0.x <- D.x; r0.y <- D.y; r0.z <- D.z
                mov r1.xyz, r1.xyzx  // r1.x <- S.x; r1.y <- S.y; r1.z <- S.z
                
                #line 145
                add r3.xyz, r3.xyzx, r6.xyzx
                
                #line 146
                add r0.xyz, r0.xyzx, r4.xyzx  // r0.x <- diffuse.x; r0.y <- diffuse.y; r0.z <- diffuse.z
                
                #line 147
                add r1.xyz, r1.xyzx, r5.xyzx  // r1.x <- spec.x; r1.y <- spec.y; r1.z <- spec.z
                
                #line 151
                add r0.xyz, r0.xyzx, r3.xyzx
                mul r0.xyz, r0.xyzx, r2.xyzx
                add r0.xyz, r1.xyzx, r0.xyzx  // r0.x <- litColor.x; r0.y <- litColor.y; r0.z <- litColor.z
                
                #line 167
                mul r0.w, r2.w, cb1[17].w  // r0.w <- litColor.w
                
                #line 168
                mov o0.xyz, r0.xyzx
                mov o0.w, r0.w
                ret 
                // Approximately 156 instruction slots used
                            
            };
        }

    }

}

