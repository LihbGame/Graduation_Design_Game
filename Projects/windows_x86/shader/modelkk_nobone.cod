//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer BufferMatrix
{
    float4x4 g_matWorld;                // Offset:    0, size:   64
    float4x4 g_matViewProj;             // Offset:   64, size:   64
    float4x4 g_matWorldInvTranspose;    // Offset:  128, size:   64
    uint    g_VertexTextureWidth;       // Offset:  192, size:    4
    uint    g_VertexTexturePosCount;    // Offset:  196, size:    4
    uint    g_VertexTextureNormalCount; // Offset:  200, size:    4
    uint    g_VertexTextureUVCount;     // Offset:  204, size:    4
}

//
// 2 local object(s)
//
Texture2D g_TextureList[2];
SamplerState g_SampleType
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    MipLODBias = float(0);
    ComparisonFunc = uint(ALWAYS /* 8 */);
    MinLOD   = float(0);
    MaxLOD   = float(3.40282347e+038);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ShaderTec
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer BufferMatrix
                // {
                //
                //   float4x4 g_matWorld;               // Offset:    0 Size:    64
                //   float4x4 g_matViewProj;            // Offset:   64 Size:    64
                //   float4x4 g_matWorldInvTranspose;   // Offset:  128 Size:    64
                //   uint g_VertexTextureWidth;         // Offset:  192 Size:     4
                //   uint g_VertexTexturePosCount;      // Offset:  196 Size:     4
                //   uint g_VertexTextureNormalCount;   // Offset:  200 Size:     4
                //   uint g_VertexTextureUVCount;       // Offset:  204 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_TextureList[1]                  texture  float4          2d             t1      1 
                // BufferMatrix                      cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE    uint   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // COLOR                    1   xyzw        3     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer CB0[13], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input v0.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_temps 5
                //
                // Initial variable locations:
                //   v0.x <- input.ValueIndex.x; v0.y <- input.ValueIndex.y; v0.z <- input.ValueIndex.z; 
                //   o3.x <- <ShaderVS return value>.NormalInWorld.x; o3.y <- <ShaderVS return value>.NormalInWorld.y; o3.z <- <ShaderVS return value>.NormalInWorld.z; o3.w <- <ShaderVS return value>.NormalInWorld.w; 
                //   o2.x <- <ShaderVS return value>.PositionInWorld.x; o2.y <- <ShaderVS return value>.PositionInWorld.y; o2.z <- <ShaderVS return value>.PositionInWorld.z; o2.w <- <ShaderVS return value>.PositionInWorld.w; 
                //   o1.x <- <ShaderVS return value>.TexCoord.x; o1.y <- <ShaderVS return value>.TexCoord.y; 
                //   o0.x <- <ShaderVS return value>.Position.x; o0.y <- <ShaderVS return value>.Position.y; o0.z <- <ShaderVS return value>.Position.z; o0.w <- <ShaderVS return value>.Position.w
                //
                #line 149 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\modelkk_nobone.fx"
                nop 
                
                #line 54
                mov r0.x, l(4)  // r0.x <- sizeofPixel
                
                #line 55
                mov r0.y, l(12)  // r0.y <- sizeofPos
                
                #line 56
                mov r0.z, l(12)  // r0.z <- sizeofNormal
                
                #line 57
                mov r0.w, l(8)  // r0.w <- sizeofUV
                
                #line 60
                imul null, r1.x, r0.y, v0.x
                udiv r1.x, null, r1.x, r0.x  // r1.x <- PosPixelIndex
                
                #line 61
                udiv null, r2.x, r1.x, cb0[12].x  // r2.x <- tempUV.x
                
                #line 62
                udiv r2.y, null, r1.x, cb0[12].x  // r2.y <- tempUV.y
                
                #line 63
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r1.x, r2.xyww, t1.xyzw
                mov r1.x, r1.x  // r1.x <- thePos.x
                
                #line 65
                mov r3.x, l(1)
                iadd r2.z, r2.x, r3.x  // r2.z <- tempUV.x
                
                #line 66
                uge r3.x, r2.z, cb0[12].x
                if_nz r3.x
                
                #line 68
                  mov r2.z, l(0)
                
                #line 69
                  mov r3.x, l(1)
                  iadd r2.y, r2.y, r3.x
                
                #line 70
                endif 
                
                #line 71
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r1.y, r2.zyww, t1.yxzw
                mov r1.y, r1.y  // r1.y <- thePos.y
                
                #line 73
                mov r2.w, l(1)
                iadd r2.x, r2.w, r2.z  // r2.x <- tempUV.x
                
                #line 74
                uge r2.w, r2.x, cb0[12].x
                if_nz r2.w
                
                #line 76
                  mov r2.x, l(0)
                
                #line 77
                  mov r2.w, l(1)
                  iadd r2.y, r2.w, r2.y
                
                #line 78
                endif 
                
                #line 79
                mov r2.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r1.z, r2.xyzz, t1.yzxw
                mov r1.z, r1.z  // r1.z <- thePos.z
                
                #line 80
                mov r1.w, l(1.000000)  // r1.w <- thePos.w
                
                #line 84
                imul null, r2.x, r0.y, cb0[12].y
                imul null, r2.y, r0.z, v0.y
                iadd r2.x, r2.y, r2.x
                udiv r2.x, null, r2.x, r0.x  // r2.x <- NormalPixelIndex
                
                #line 85
                udiv null, r3.x, r2.x, cb0[12].x  // r3.x <- tempUV.x
                
                #line 86
                udiv r3.y, null, r2.x, cb0[12].x  // r3.y <- tempUV.y
                
                #line 87
                mov r3.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r2.x, r3.xyww, t1.xyzw
                mov r2.x, r2.x  // r2.x <- theNormal.x
                
                #line 89
                mov r4.x, l(1)
                iadd r3.z, r3.x, r4.x  // r3.z <- tempUV.x
                
                #line 90
                uge r4.x, r3.z, cb0[12].x
                if_nz r4.x
                
                #line 92
                  mov r3.z, l(0)
                
                #line 93
                  mov r4.x, l(1)
                  iadd r3.y, r3.y, r4.x
                
                #line 94
                endif 
                
                #line 95
                mov r3.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r2.y, r3.zyww, t1.yxzw
                mov r2.y, r2.y  // r2.y <- theNormal.y
                
                #line 97
                mov r3.w, l(1)
                iadd r3.x, r3.w, r3.z  // r3.x <- tempUV.x
                
                #line 98
                uge r3.w, r3.x, cb0[12].x
                if_nz r3.w
                
                #line 100
                  mov r3.x, l(0)
                
                #line 101
                  mov r3.w, l(1)
                  iadd r3.y, r3.w, r3.y
                
                #line 102
                endif 
                
                #line 103
                mov r3.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r2.z, r3.xyzz, t1.yzxw
                mov r2.z, r2.z  // r2.z <- theNormal.z
                
                #line 104
                mov r2.w, l(0)  // r2.w <- theNormal.w
                
                #line 107
                imul null, r0.y, r0.y, cb0[12].y
                imul null, r0.z, r0.z, cb0[12].z
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r0.w, v0.z
                iadd r0.y, r0.z, r0.y
                udiv r0.x, null, r0.y, r0.x  // r0.x <- UVPixelIndex
                
                #line 108
                udiv null, r3.z, r0.x, cb0[12].x  // r3.z <- tempUV.x
                
                #line 109
                udiv r3.y, null, r0.x, cb0[12].x
                
                #line 110
                mov r3.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.x, r3.zyww, t1.xyzw
                mov r0.x, r0.x  // r0.x <- theUV.x
                
                #line 112
                mov r0.z, l(1)
                iadd r3.x, r0.z, r3.z  // r3.x <- tempUV.x
                
                #line 113
                uge r0.z, r3.x, cb0[12].x
                if_nz r0.z
                
                #line 115
                  mov r3.x, l(0)
                
                #line 116
                  mov r0.z, l(1)
                  iadd r3.y, r0.z, r3.y
                
                #line 117
                endif 
                
                #line 118
                mov r3.z, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.y, r3.xyzz, t1.yxzw
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 149
                mov r1.x, r1.x  // r1.x <- thePos.x
                mov r1.y, r1.y  // r1.y <- thePos.y
                mov r1.z, r1.z  // r1.z <- thePos.z
                mov r1.w, r1.w  // r1.w <- thePos.w
                mov r2.x, r2.x  // r2.x <- theNormal.x
                mov r2.y, r2.y  // r2.y <- theNormal.y
                mov r2.z, r2.z  // r2.z <- theNormal.z
                mov r2.w, r2.w  // r2.w <- theNormal.w
                mov r0.x, r0.x  // r0.x <- theUV.x
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 153
                dp4 r3.x, r1.xyzw, cb0[0].xyzw  // r3.x <- thePos.x
                dp4 r3.y, r1.xyzw, cb0[1].xyzw  // r3.y <- thePos.y
                dp4 r3.z, r1.xyzw, cb0[2].xyzw  // r3.z <- thePos.z
                dp4 r3.w, r1.xyzw, cb0[3].xyzw  // r3.w <- thePos.w
                
                #line 154
                dp4 r1.x, r2.xyzw, cb0[8].xyzw  // r1.x <- theNormal.x
                dp4 r1.y, r2.xyzw, cb0[9].xyzw  // r1.y <- theNormal.y
                dp4 r1.z, r2.xyzw, cb0[10].xyzw  // r1.z <- theNormal.z
                dp4 r1.w, r2.xyzw, cb0[11].xyzw  // r1.w <- theNormal.w
                
                #line 157
                dp4 r2.x, r3.xyzw, cb0[4].xyzw  // r2.x <- output.Position.x
                dp4 r2.y, r3.xyzw, cb0[5].xyzw  // r2.y <- output.Position.y
                dp4 r2.z, r3.xyzw, cb0[6].xyzw  // r2.z <- output.Position.z
                dp4 r2.w, r3.xyzw, cb0[7].xyzw  // r2.w <- output.Position.w
                
                #line 158
                mov r0.xy, r0.xyxx  // r0.x <- output.TexCoord.x; r0.y <- output.TexCoord.y
                
                #line 159
                mov r3.xyzw, r3.xyzw  // r3.x <- output.PositionInWorld.x; r3.y <- output.PositionInWorld.y; r3.z <- output.PositionInWorld.z; r3.w <- output.PositionInWorld.w
                
                #line 160
                mov r1.xyzw, r1.xyzw  // r1.x <- output.NormalInWorld.x; r1.y <- output.NormalInWorld.y; r1.z <- output.NormalInWorld.z; r1.w <- output.NormalInWorld.w
                
                #line 161
                mov o0.xyzw, r2.xyzw
                mov o2.xyzw, r3.xyzw
                mov o3.xyzw, r1.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 119 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_SampleType                      sampler      NA          NA             s0      1 
                // g_TextureList[0]                  texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                // COLOR                    1   xyzw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   v2.x <- input.PositionInWorld.x; v2.y <- input.PositionInWorld.y; v2.z <- input.PositionInWorld.z; v2.w <- input.PositionInWorld.w; 
                //   v3.x <- input.NormalInWorld.x; v3.y <- input.NormalInWorld.y; v3.z <- input.NormalInWorld.z; v3.w <- input.NormalInWorld.w; 
                //   o0.x <- <ShaderPS return value>.x; o0.y <- <ShaderPS return value>.y; o0.z <- <ShaderPS return value>.z; o0.w <- <ShaderPS return value>.w
                //
                #line 169 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\modelkk_nobone.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- outputColor.x; r0.y <- outputColor.y; r0.z <- outputColor.z; r0.w <- outputColor.w
                
                #line 177
                mov r1.x, l(-0.100000)
                add r1.x, r0.w, r1.x
                lt r1.x, r1.x, l(0.000000)
                and r1.x, r1.x, l(-1)
                discard_nz r1.x
                
                #line 178
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 8 instruction slots used
                            
            };
        }

    }

}

