//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer BufferMatrix
{
    float4x4 g_matWorld;                // Offset:    0, size:   64
    float4x4 g_matViewProj;             // Offset:   64, size:   64
    float4x4 g_matWorldInvTranspose;    // Offset:  128, size:   64
    uint    g_VertexTextureWidth;       // Offset:  192, size:    4
    uint    g_VertexTexturePosCount;    // Offset:  196, size:    4
    uint    g_VertexTextureNormalCount; // Offset:  200, size:    4
    uint    g_VertexTextureTangentCount;// Offset:  204, size:    4
    uint    g_VertexTextureUVCount;     // Offset:  208, size:    4
    uint    g_AnimTextureWidth;         // Offset:  212, size:    4
    uint    g_AnimTextureBoneCount;     // Offset:  216, size:    4
    uint    g_AnimTextureKeyFrameIndex; // Offset:  220, size:    4
    bool    IshaveTangent;              // Offset:  224, size:    4
}

//
// 3 local object(s)
//
Texture2D g_TextureList[3];
Texture2D g_NormalTexture;
SamplerState g_SampleType
{
    Filter   = uint(COMPARISON_ANISOTROPIC /* 213 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    AddressW = uint(WRAP /* 1 */);
    MipLODBias = float(0);
    MaxAnisotropy = uint(1);
    ComparisonFunc = uint(ALWAYS /* 8 */);
    MinLOD   = float(0);
    MaxLOD   = float(3.40282347e+038);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 ShaderTec
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer BufferMatrix
                // {
                //
                //   float4x4 g_matWorld;               // Offset:    0 Size:    64
                //   float4x4 g_matViewProj;            // Offset:   64 Size:    64
                //   float4x4 g_matWorldInvTranspose;   // Offset:  128 Size:    64
                //   uint g_VertexTextureWidth;         // Offset:  192 Size:     4
                //   uint g_VertexTexturePosCount;      // Offset:  196 Size:     4
                //   uint g_VertexTextureNormalCount;   // Offset:  200 Size:     4
                //   uint g_VertexTextureTangentCount;  // Offset:  204 Size:     4
                //   uint g_VertexTextureUVCount;       // Offset:  208 Size:     4 [unused]
                //   uint g_AnimTextureWidth;           // Offset:  212 Size:     4
                //   uint g_AnimTextureBoneCount;       // Offset:  216 Size:     4
                //   uint g_AnimTextureKeyFrameIndex;   // Offset:  220 Size:     4
                //   bool IshaveTangent;                // Offset:  224 Size:     4 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_TextureList[1]                  texture  float4          2d             t1      1 
                // g_TextureList[2]                  texture  float4          2d             t2      1 
                // BufferMatrix                      cbuffer      NA          NA            cb0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyzw        0     NONE    uint   xy w
                // COLOR                    0   xyzw        1     NONE    uint   xyzw
                // COLOR                    1   xyzw        2     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float   xyzw
                // COLOR                    1   xyzw        3     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                                              { 0, 1.000000, 0, 0},
                                              { 0, 0, 1.000000, 0},
                                              { 0, 0, 0, 1.000000},
                                              { -1, 0, 0, 0},
                                              { 0, -1, 0, 0},
                                              { 0, 0, -1, 0},
                                              { 0, 0, 0, -1} }
                dcl_constantbuffer CB0[14], immediateIndexed
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input v0.xyw
                dcl_input v1.xyzw
                dcl_input v2.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyzw
                dcl_output o3.xyzw
                dcl_temps 11
                //
                // Initial variable locations:
                //   v0.x <- input.ValueIndex.x; v0.y <- input.ValueIndex.y; v0.z <- input.ValueIndex.z; v0.w <- input.ValueIndex.w; 
                //   v1.x <- input.BoneIndex.x; v1.y <- input.BoneIndex.y; v1.z <- input.BoneIndex.z; v1.w <- input.BoneIndex.w; 
                //   v2.x <- input.BoneWeight.x; v2.y <- input.BoneWeight.y; v2.z <- input.BoneWeight.z; v2.w <- input.BoneWeight.w; 
                //   o3.x <- <ShaderVS return value>.NormalInWorld.x; o3.y <- <ShaderVS return value>.NormalInWorld.y; o3.z <- <ShaderVS return value>.NormalInWorld.z; o3.w <- <ShaderVS return value>.NormalInWorld.w; 
                //   o2.x <- <ShaderVS return value>.PositionInWorld.x; o2.y <- <ShaderVS return value>.PositionInWorld.y; o2.z <- <ShaderVS return value>.PositionInWorld.z; o2.w <- <ShaderVS return value>.PositionInWorld.w; 
                //   o1.x <- <ShaderVS return value>.TexCoord.x; o1.y <- <ShaderVS return value>.TexCoord.y; 
                //   o0.x <- <ShaderVS return value>.Position.x; o0.y <- <ShaderVS return value>.Position.y; o0.z <- <ShaderVS return value>.Position.z; o0.w <- <ShaderVS return value>.Position.w
                //
                #line 211 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\modelkk.fx"
                nop 
                
                #line 63
                mov r0.x, l(4)  // r0.x <- sizeofPixel
                
                #line 64
                mov r0.y, l(12)  // r0.y <- sizeofPos
                
                #line 65
                mov r0.z, l(12)  // r0.z <- sizeofNormal
                
                #line 66
                mov r0.w, l(12)  // r0.w <- sizeofTangent
                
                #line 67
                mov r1.x, l(8)  // r1.x <- sizeofUV
                
                #line 70
                imul null, r1.y, r0.y, v0.x
                udiv r1.y, null, r1.y, r0.x  // r1.y <- PosPixelIndex
                
                #line 71
                udiv null, r2.y, r1.y, cb0[12].x  // r2.y <- tempUV.x
                
                #line 72
                udiv r2.z, null, r1.y, cb0[12].x  // r2.z <- tempUV.y
                
                #line 73
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r3.x, r2.yzww, t1.xyzw  // r3.x <- thePos.x
                
                #line 75
                mov r1.y, l(1)
                iadd r2.x, r1.y, r2.y  // r2.x <- tempUV.x
                
                #line 76
                ld_indexable(texture2d)(float,float,float,float) r3.y, r2.xzww, t1.yxzw  // r3.y <- thePos.y
                
                #line 78
                mov r1.y, l(1)
                iadd r4.x, r1.y, r2.x  // r4.x <- tempUV.x
                
                #line 79
                mov r4.yzw, r2.zzww
                ld_indexable(texture2d)(float,float,float,float) r3.z, r4.xyzw, t1.yzxw  // r3.z <- thePos.z
                
                #line 80
                mov r3.w, l(1.000000)  // r3.w <- thePos.w
                
                #line 84
                imul null, r1.y, r0.y, cb0[12].y
                imul null, r1.z, r0.z, v0.y
                iadd r1.y, r1.z, r1.y
                udiv r1.y, null, r1.y, r0.x  // r1.y <- NormalPixelIndex
                
                #line 85
                udiv null, r2.y, r1.y, cb0[12].x  // r2.y <- tempUV.x
                
                #line 86
                udiv r2.z, null, r1.y, cb0[12].x
                
                #line 87
                mov r2.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r4.x, r2.yzww, t1.xyzw  // r4.x <- theNormal.x
                
                #line 89
                mov r1.y, l(1)
                iadd r2.x, r1.y, r2.y  // r2.x <- tempUV.x
                
                #line 90
                ld_indexable(texture2d)(float,float,float,float) r4.y, r2.xzww, t1.yxzw  // r4.y <- theNormal.y
                
                #line 92
                mov r1.y, l(1)
                iadd r5.x, r1.y, r2.x  // r5.x <- tempUV.x
                
                #line 93
                mov r5.yzw, r2.zzww
                ld_indexable(texture2d)(float,float,float,float) r4.z, r5.xyzw, t1.yzxw  // r4.z <- theNormal.z
                
                #line 94
                mov r4.w, l(0)  // r4.w <- theNormal.w
                
                #line 97
                imul null, r0.y, r0.y, cb0[12].y
                imul null, r0.z, r0.z, cb0[12].z
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r0.w, cb0[12].w
                iadd r0.y, r0.z, r0.y
                imul null, r0.z, r1.x, v0.w
                iadd r0.y, r0.z, r0.y
                udiv r0.x, null, r0.y, r0.x  // r0.x <- UVPixelIndex
                
                #line 98
                udiv null, r1.y, r0.x, cb0[12].x  // r1.y <- tempUV.x
                
                #line 99
                udiv r1.z, null, r0.x, cb0[12].x  // r1.z <- tempUV.y
                
                #line 100
                mov r1.w, l(0)
                ld_indexable(texture2d)(float,float,float,float) r0.x, r1.yzww, t1.xyzw
                mov r0.x, r0.x  // r0.x <- theUV.x
                
                #line 102
                mov r0.z, l(1)
                iadd r1.x, r0.z, r1.y  // r1.x <- tempUV.x
                
                #line 103
                ld_indexable(texture2d)(float,float,float,float) r0.y, r1.xzww, t1.yxzw
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 211
                mov r3.x, r3.x  // r3.x <- thePos.x
                mov r3.y, r3.y  // r3.y <- thePos.y
                mov r3.z, r3.z  // r3.z <- thePos.z
                mov r3.w, r3.w  // r3.w <- thePos.w
                mov r4.x, r4.x  // r4.x <- theNormal.x
                mov r4.y, r4.y  // r4.y <- theNormal.y
                mov r4.z, r4.z  // r4.z <- theNormal.z
                mov r4.w, r4.w  // r4.w <- theNormal.w
                mov r0.x, r0.x  // r0.x <- theUV.x
                mov r0.y, r0.y  // r0.y <- theUV.y
                
                #line 215
                ine r0.z, cb0[13].w, l(-1)
                if_nz r0.z
                
                #line 217
                  nop 
                  mov r1.xyzw, r3.xyzw
                  mov r2.xyzw, r4.xyzw
                
                #line 161
                  mov r5.xyz, l(0,0,0,0)  // r5.x <- finalPos.x; r5.y <- finalPos.y; r5.z <- finalPos.z
                
                #line 162
                  mov r6.xyz, l(0,0,0,0)  // r6.x <- finalNormal.x; r6.y <- finalNormal.y; r6.z <- finalNormal.z
                
                #line 163
                  mov r0.z, l(0)  // r0.z <- i
                  mov r3.xyz, r5.xyzx  // r3.x <- finalPos.x; r3.y <- finalPos.y; r3.z <- finalPos.z
                  mov r4.xyz, r6.xyzx  // r4.x <- finalNormal.x; r4.y <- finalNormal.y; r4.z <- finalNormal.z
                  mov r0.w, r0.z  // r0.w <- i
                  loop 
                    mov r5.w, l(4)
                    ult r5.w, r0.w, r5.w
                    breakc_z r5.w
                
                #line 165
                    and r7.xyzw, v1.xyzw, icb[r0.w + 4].xyzw
                    or r7.xy, r7.ywyy, r7.xzxx
                    or r5.w, r7.y, r7.x
                    ine r5.w, r5.w, l(-1)
                    if_nz r5.w
                
                #line 167
                      nop 
                      and r7.xyzw, v1.xyzw, icb[r0.w + 4].xyzw
                      or r7.xy, r7.ywyy, r7.xzxx
                      or r5.w, r7.y, r7.x
                
                #line 110
                      mov r6.w, l(4)  // r6.w <- sizeofPixel
                
                #line 111
                      mov r7.x, l(48)  // r7.x <- ElementSize
                
                #line 112
                      imul null, r7.y, cb0[13].z, cb0[13].w
                      imul null, r7.y, r7.x, r7.y
                      imul null, r5.w, r5.w, r7.x
                      iadd r5.w, r5.w, r7.y
                      udiv r5.w, null, r5.w, r6.w  // r5.w <- startPixelIndex
                
                #line 114
                      udiv null, r7.y, r5.w, cb0[13].y  // r7.y <- tempUV.x
                
                #line 115
                      udiv r7.z, null, r5.w, cb0[13].y  // r7.z <- tempUV.y
                
                #line 116
                      mov r7.w, l(0)
                      ld_indexable(texture2d)(float,float,float,float) r8.x, r7.yzww, t2.xyzw  // r8.x <- finalMat._m00
                
                #line 118
                      mov r5.w, l(1)
                      iadd r7.x, r5.w, r7.y  // r7.x <- tempUV.x
                
                #line 119
                      ld_indexable(texture2d)(float,float,float,float) r9.x, r7.xzww, t2.xyzw  // r9.x <- finalMat._m01
                
                #line 121
                      mov r5.w, l(1)
                      iadd r7.y, r5.w, r7.x  // r7.y <- tempUV.x
                
                #line 122
                      ld_indexable(texture2d)(float,float,float,float) r10.x, r7.yzww, t2.xyzw  // r10.x <- finalMat._m02
                
                #line 124
                      mov r5.w, l(1)
                      iadd r7.x, r5.w, r7.y  // r7.x <- tempUV.x
                
                #line 125
                      ld_indexable(texture2d)(float,float,float,float) r8.y, r7.xzww, t2.yxzw  // r8.y <- finalMat._m10
                
                #line 127
                      mov r5.w, l(1)
                      iadd r7.y, r5.w, r7.x  // r7.y <- tempUV.x
                
                #line 128
                      ld_indexable(texture2d)(float,float,float,float) r9.y, r7.yzww, t2.yxzw  // r9.y <- finalMat._m11
                
                #line 130
                      mov r5.w, l(1)
                      iadd r7.x, r5.w, r7.y  // r7.x <- tempUV.x
                
                #line 131
                      ld_indexable(texture2d)(float,float,float,float) r10.y, r7.xzww, t2.yxzw  // r10.y <- finalMat._m12
                
                #line 133
                      mov r5.w, l(1)
                      iadd r7.y, r5.w, r7.x  // r7.y <- tempUV.x
                
                #line 134
                      ld_indexable(texture2d)(float,float,float,float) r8.z, r7.yzww, t2.yzxw  // r8.z <- finalMat._m20
                
                #line 136
                      mov r5.w, l(1)
                      iadd r7.x, r5.w, r7.y  // r7.x <- tempUV.x
                
                #line 137
                      ld_indexable(texture2d)(float,float,float,float) r9.z, r7.xzww, t2.yzxw  // r9.z <- finalMat._m21
                
                #line 139
                      mov r5.w, l(1)
                      iadd r7.y, r5.w, r7.x  // r7.y <- tempUV.x
                
                #line 140
                      ld_indexable(texture2d)(float,float,float,float) r10.z, r7.yzww, t2.yzxw  // r10.z <- finalMat._m22
                
                #line 142
                      mov r5.w, l(1)
                      iadd r7.x, r5.w, r7.y  // r7.x <- tempUV.x
                
                #line 143
                      ld_indexable(texture2d)(float,float,float,float) r8.w, r7.xzww, t2.yzwx  // r8.w <- finalMat._m30
                
                #line 145
                      mov r5.w, l(1)
                      iadd r7.y, r5.w, r7.x  // r7.y <- tempUV.x
                
                #line 146
                      ld_indexable(texture2d)(float,float,float,float) r9.w, r7.yzww, t2.yzwx  // r9.w <- finalMat._m31
                
                #line 148
                      mov r5.w, l(1)
                      iadd r7.x, r5.w, r7.y  // r7.x <- tempUV.x
                
                #line 149
                      ld_indexable(texture2d)(float,float,float,float) r10.w, r7.xzww, t2.yzwx  // r10.w <- finalMat._m32
                
                #line 156
                      mov r8.x, r8.x  // r8.x <- <GetSingleBoneAnimMatrix return value>._m00
                      mov r8.y, r8.y  // r8.y <- <GetSingleBoneAnimMatrix return value>._m10
                      mov r8.z, r8.z  // r8.z <- <GetSingleBoneAnimMatrix return value>._m20
                      mov r8.w, r8.w  // r8.w <- <GetSingleBoneAnimMatrix return value>._m30
                      mov r9.x, r9.x  // r9.x <- <GetSingleBoneAnimMatrix return value>._m01
                      mov r9.y, r9.y  // r9.y <- <GetSingleBoneAnimMatrix return value>._m11
                      mov r9.z, r9.z  // r9.z <- <GetSingleBoneAnimMatrix return value>._m21
                      mov r9.w, r9.w  // r9.w <- <GetSingleBoneAnimMatrix return value>._m31
                      mov r10.x, r10.x  // r10.x <- <GetSingleBoneAnimMatrix return value>._m02
                      mov r10.y, r10.y  // r10.y <- <GetSingleBoneAnimMatrix return value>._m12
                      mov r10.z, r10.z  // r10.z <- <GetSingleBoneAnimMatrix return value>._m22
                      mov r10.w, r10.w  // r10.w <- <GetSingleBoneAnimMatrix return value>._m32
                
                #line 167
                      mov r8.xyzw, r8.xyzw  // r8.x <- BoneMat._m00; r8.y <- BoneMat._m10; r8.z <- BoneMat._m20; r8.w <- BoneMat._m30
                      mov r9.xyzw, r9.xyzw  // r9.x <- BoneMat._m01; r9.y <- BoneMat._m11; r9.z <- BoneMat._m21; r9.w <- BoneMat._m31
                      mov r10.xyzw, r10.xyzw  // r10.x <- BoneMat._m02; r10.y <- BoneMat._m12; r10.z <- BoneMat._m22; r10.w <- BoneMat._m32
                
                #line 169
                      dp4 r7.x, r1.xyzw, r8.xyzw
                      dp4 r7.y, r1.xyzw, r9.xyzw
                      dp4 r7.z, r1.xyzw, r10.xyzw
                      dp4 r5.w, v2.xyzw, icb[r0.w + 0].xyzw
                      mul r7.xyz, r5.wwww, r7.xyzx
                      add r3.xyz, r3.xyzx, r7.xyzx
                
                #line 171
                      dp4 r7.x, r2.xyzw, r8.xyzw
                      dp4 r7.y, r2.xyzw, r9.xyzw
                      dp4 r7.z, r2.xyzw, r10.xyzw
                      dp4 r5.w, v2.xyzw, icb[r0.w + 0].xyzw
                      mul r7.xyz, r5.wwww, r7.xyzx
                      add r4.xyz, r4.xyzx, r7.xyzx
                
                #line 172
                    else 
                
                #line 175
                      break   // r8.x <- BoneMat._m00; r8.y <- BoneMat._m10; r8.z <- BoneMat._m20; r8.w <- BoneMat._m30; r9.x <- BoneMat._m01; r9.y <- BoneMat._m11; r9.z <- BoneMat._m21; r9.w <- BoneMat._m31; r10.x <- BoneMat._m02; r10.y <- BoneMat._m12; r10.z <- BoneMat._m22; r10.w <- BoneMat._m32
                
                #line 176
                    endif 
                
                #line 163
                    iadd r0.w, r0.w, l(1)
                
                #line 177
                  endloop 
                
                #line 178
                  mov r3.w, l(1.000000)  // r3.w <- finalPos.w
                
                #line 179
                  mov r4.w, l(0)  // r4.w <- finalNormal.w
                
                #line 180
                  mov r3.xyz, r3.xyzx  // r3.x <- thePos.x; r3.y <- thePos.y; r3.z <- thePos.z
                  mov r3.w, r3.w  // r3.w <- thePos.w
                
                #line 181
                  mov r4.xyz, r4.xyzx  // r4.x <- theNormal.x; r4.y <- theNormal.y; r4.z <- theNormal.z
                  mov r4.w, r4.w  // r4.w <- theNormal.w
                
                #line 217
                  mov r3.xyzw, r3.xyzw  // r3.x <- thePos.x; r3.y <- thePos.y; r3.z <- thePos.z; r3.w <- thePos.w
                  mov r4.xyzw, r4.xyzw  // r4.x <- theNormal.x; r4.y <- theNormal.y; r4.z <- theNormal.z; r4.w <- theNormal.w
                
                #line 218
                endif 
                
                #line 221
                dp4 r1.x, r3.xyzw, cb0[0].xyzw  // r1.x <- thePos.x
                dp4 r1.y, r3.xyzw, cb0[1].xyzw  // r1.y <- thePos.y
                dp4 r1.z, r3.xyzw, cb0[2].xyzw  // r1.z <- thePos.z
                dp4 r1.w, r3.xyzw, cb0[3].xyzw  // r1.w <- thePos.w
                
                #line 222
                dp4 r2.x, r4.xyzw, cb0[8].xyzw  // r2.x <- theNormal.x
                dp4 r2.y, r4.xyzw, cb0[9].xyzw  // r2.y <- theNormal.y
                dp4 r2.z, r4.xyzw, cb0[10].xyzw  // r2.z <- theNormal.z
                dp4 r2.w, r4.xyzw, cb0[11].xyzw  // r2.w <- theNormal.w
                
                #line 225
                dp4 r3.x, r1.xyzw, cb0[4].xyzw  // r3.x <- output.Position.x
                dp4 r3.y, r1.xyzw, cb0[5].xyzw  // r3.y <- output.Position.y
                dp4 r3.z, r1.xyzw, cb0[6].xyzw  // r3.z <- output.Position.z
                dp4 r3.w, r1.xyzw, cb0[7].xyzw  // r3.w <- output.Position.w
                
                #line 226
                mov r0.xy, r0.xyxx  // r0.x <- output.TexCoord.x; r0.y <- output.TexCoord.y
                
                #line 227
                mov r1.xyzw, r1.xyzw  // r1.x <- output.PositionInWorld.x; r1.y <- output.PositionInWorld.y; r1.z <- output.PositionInWorld.z; r1.w <- output.PositionInWorld.w
                
                #line 228
                mov r2.xyzw, r2.xyzw  // r2.x <- output.NormalInWorld.x; r2.y <- output.NormalInWorld.y; r2.z <- output.NormalInWorld.z; r2.w <- output.NormalInWorld.w
                
                #line 229
                mov o0.xyzw, r3.xyzw
                mov o2.xyzw, r1.xyzw
                mov o3.xyzw, r2.xyzw
                mov o1.xy, r0.xyxx
                ret 
                // Approximately 192 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // g_SampleType                      sampler      NA          NA             s0      1 
                // g_TextureList[0]                  texture  float4          2d             t0      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // COLOR                    0   xyzw        2     NONE   float       
                // COLOR                    1   xyzw        3     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- input.Position.x; v0.y <- input.Position.y; v0.z <- input.Position.z; v0.w <- input.Position.w; 
                //   v1.x <- input.TexCoord.x; v1.y <- input.TexCoord.y; 
                //   v2.x <- input.PositionInWorld.x; v2.y <- input.PositionInWorld.y; v2.z <- input.PositionInWorld.z; v2.w <- input.PositionInWorld.w; 
                //   v3.x <- input.NormalInWorld.x; v3.y <- input.NormalInWorld.y; v3.z <- input.NormalInWorld.z; v3.w <- input.NormalInWorld.w; 
                //   o0.x <- <ShaderPS return value>.x; o0.y <- <ShaderPS return value>.y; o0.z <- <ShaderPS return value>.z; o0.w <- <ShaderPS return value>.w
                //
                #line 237 "D:\noesisGUI\Src\Packages\Samples\Menu3D\Projects\windows_x86\shader\modelkk.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0  // r0.x <- outputColor.x; r0.y <- outputColor.y; r0.z <- outputColor.z; r0.w <- outputColor.w
                
                #line 244
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 3 instruction slots used
                            
            };
        }

    }

}

